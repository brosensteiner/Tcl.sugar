<?xml version="1.0" encoding="UTF-8"?>
<!--
@description Defines the Tcl syntax
@author 	 Bernhard Rosensteiner <brosensteiner@gmail.com>
@copyright 	 The MIT License

Copyright (c) 2012 Bernhard Rosensteiner

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<syntax name="language-root.tcl">

    <zones>
    
		<include collection="Invalid" />
		<zone name="tcl.comment.shebang">
			<expression>^(#!).*?\b(tclsh|wish)\b.*?$|^(#!).*?\benv\s+?tclsh.*?$</expression>
			<capture number="1" name="punctuation.definition.begin"/>
		</zone>
		<include collection="Numeric" />
		<include collection="EscapeChar"/>
		<include collection="Variables" />
		<include collection="ClassesAndProcedures"/>
		<include collection="tclLanguage" />
		<include collection="FormatSpecifier"/>
		<include collection="Operators" />
		<include collection="Math" />
		<include collection="VariableExpansion" />
		<include collection="FlowControl" />
		<include collection="Strings"/>
		<include syntax="language-root.amira" /><!--can be deleted if Amira syntax extension is not needed-->
		<include collection="Comments" />
		<include collection="General" />
		<include collection="BracesBrackets" />
		
	</zones>
    
	<library>
		
		<collection name="Default_Order_Of_Zones">
			<include collection="Numeric" />
			<include collection="EscapeChar"/>
			<include collection="Invalid" />
			<include collection="Variables" />
			<include collection="tclLanguage" />
			<include collection="Math" />
			<include collection="VariableExpansion" />
			<include collection="FormatSpecifier"/>
			<include collection="FlowControl" />
			<include collection="Operators" />
			<include collection="OperatorsNotInQuotesAllowed" />
			<include collection="Strings"/>
			<include syntax="language-root.amira" /><!--can be deleted if Amira syntax extension is not needed-->
			<include collection="Comments" />
			<include collection="General" />
			<include collection="BracesBrackets" />
		</collection>
		
		<collection name="ClassesAndProcedures">
		
			<zone name="tcl.command.function">
				<expression>\b(proc)\s+([^"\[][^\[\s]*)</expression>
				<capture number="1" name="tcl.command.function.function-call"/>
				<capture number="2" name="tcl.command.function.name"/>
			</zone>
			
			<!--this zone´s makes it possible to highlight ::oo options in it-->
			<zone name="tcl.container.function.oo.oo-object">
			    <starts-with>
			        <expression>(::|\s|^)?(oo)(::)(objdefine|object\s+(?:create|new))\s+([^"\[][^\[\s]*)\s+(\{)</expression>
			        <capture number="1" name="tcl.punctuation.namespace"/>
			        <capture number="2" name="tcl.command.function-call"/>
			        <capture number="3" name="tcl.punctuation.namespace.s"/>
			        <capture number="4" name="tcl.options.oo"/>
			        <capture number="5" name="tcl.command.function.name"/>
			        <capture number="6" name="tcl.punctuation.open-brace"/>
			    </starts-with>
			    <ends-with>
			        <expression>\}</expression>
			        <capture number="0" name="tcl.punctuation.close-brace"/>
			    </ends-with>
			    <subzones>
			    	<zone name="tcl.options.options-oo.objdefine">
			    	    <expression>\b(class|deletemethod|export|f(?:ilter|orward)|m(?:ethod|ixin)|renamemethod|unexport|variable)\b</expression>
			    	</zone>
			    	<include syntax="language-root.tcl" />
			    </subzones>
			</zone>
			
			<zone name="tcl.container.function.oo.oo-class">
			    <starts-with>
			        <expression>(::|\s|^)?(oo)(::)(define|class\s+(?:create(?:WithNamespace)?|new))\s+([^"\[][^\[\s]*)\s+(\{)</expression>
			        <capture number="1" name="tcl.punctuation.namespace"/>
			        <capture number="2" name="tcl.command.function-call"/>
			        <capture number="3" name="tcl.punctuation.namespace.s"/>
			        <capture number="4" name="tcl.options.oo"/>
			        <capture number="5" name="tcl.command.function.name"/>
			        <capture number="6" name="tcl.punctuation.open-brace"/>
			    </starts-with>
			    <ends-with>
			        <expression>\}</expression>
			        <capture number="0" name="tcl.punctuation.close-brace"/>
			    </ends-with>
			    <subzones>
			    	<zone name="tcl.options.options-oo.define">
			    	    <expression>\b(constructor|de(?:letemethod|structor)|export|f(?:ilter|orward)|m(?:ethod|ixin)|renamemethod|s(?:elf|uperclass)|unexport|variable)\b</expression>
			    	</zone>
			    	<include syntax="language-root.tcl" />
			    </subzones>
			</zone>
			
			<zone name="tcl.command.oo">
			    <expression>(::|\s|^)?(oo)(::)(class|object)(\s+)(new|create(?:WithNamespace)?)(\s+[^"\[\]\{\}][^\[\]\{\}\s]*)?</expression>
			    <capture number="1" name="tcl.punctuation.namespace"/>
			    <capture number="2" name="tcl.command.function-call"/>
			    <capture number="3" name="tcl.punctuation.namespace.s"/>
			    <capture number="4" name="tcl.options.oo"/>
			    <capture number="5" name="tcl.punctuation.s"/>
			    <capture number="6" name="tcl.options.oo"/>
			    <capture number="7" name="tcl.command.function.name"/>
			</zone>
			
		</collection>
	
		<collection name="BracesBrackets">
			<include collection="Braces" />
			<include collection="Brackets" />
		</collection>
		
		<collection name="Braces">
			<zone name="tcl.container.balanced.braces.subst">
			    <starts-with>
			        <expression>\{</expression>
			        <capture number="0" name="tcl.punctuation.open-brace"/>
			    </starts-with>
			    <ends-with>
			        <expression>\}</expression>
			        <capture number="0" name="tcl.punctuation.close-brace"/>
			    </ends-with>
			    <subzones>
			    	<include collection="ClassesAndProcedures"/>
			    	<include collection="Default_Order_Of_Zones" />
			    </subzones>
			</zone>
		</collection>
		
		<collection name="Brackets">
			<zone name="tcl.container.balanced.brackets.subst">
			    <starts-with>
			        <expression>\[</expression>
			        <capture number="0" name="tcl.punctuation.open-bracket"/>
			    </starts-with>
			    <ends-with>
			        <expression>\]</expression>
			        <capture number="0" name="tcl.punctuation.close-bracket"/>
			    </ends-with>
			    <subzones>
			    	<include collection="OperatorsNotInQuotesAllowed" />
			    	<include syntax="language-root.tcl" />
			    </subzones>
			</zone>
		</collection>
		
		<collection name="Parenthesis">
			<zone name="tcl.container.balanced.parenthesis">
			    <starts-with>
			        <expression>\(</expression>
			        <capture number="0" name="tcl.punctuation.open-parenthesis"/>
			    </starts-with>
			    <ends-with>
			        <expression>\)</expression>
			        <capture number="0" name="tcl.punctuation.close-parenthesis"/>
			    </ends-with>
			    <subzones>
			    	<include syntax="language-root.tcl" />
			    </subzones>
			</zone>
		</collection>
			
		<!--some invalid syntax (eventually)-->
		<collection name="Invalid">
			
		</collection>
		
		<collection name="Markup">
			<zone name="markup.link"><!--stolen from php sugar - really crazy regex :)-->
				<expression>(?i)\b(?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()&lt;>]+|\(([^\s()&lt;>]+|(\([^\s()&lt;>]+\)))*\))+(?:\(([^\s()&lt;>]+|(\([^\s()&lt;>]+\)))*\)|[^\s`!()\[\]{};:'".,&lt;>?«»“”‘’])</expression>
			</zone>
		</collection>
	
		<collection name="Comments">
			
			<!--this zone helps not to fill up Espresso´s Navigator (catches empty comment lines)-->
			<zone name="tcl.comment-line-empty">
			    <expression>(?&lt;=;|\s|^|\s\{)(#(\s|#)*)$</expression>
			    <capture number="1" name="context.punctuation.comment.begin"/>   
			</zone>
			
			<!--this block comment is actually a convinient way to write comments in tcl-->
			<zone name="tcl.comment.block.task"><!--can not catch markup in first line - this is the problem of the tcl comment syntax because there are no real block comments... -->
			    <starts-with>
			        <expression>(?&lt;=;|\s|^|\s\{)(#)[^\d]?(?=.*?\b(?i:FIX ?ME|TODO)\b).*?(?&lt;!\\)\\\s*$</expression>
			        <capture number="1" name="punctuation.definition.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>[^\\]\s*\n|^\s*\n</expression><!--TODO: don´t know why i can not catch empty line ...-->
			    </ends-with>
			    <subzones>
			    	<include collection="Markup"/>
			    </subzones>
			</zone>
			
			<zone name="tcl.comment.line.task">
				<starts-with>
			    	<expression>(?&lt;=;|\s|^|\s\{)(#)[^\d]?(?=.*?\b(?i:FIX ?ME|TODO)\b)</expression>
			    	<capture number="1" name="punctuation.definition.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>\s*$</expression>
			    </ends-with>
			    <subzones>
			    	<include collection="Markup"/>
			    </subzones>
			</zone>
		
			<!--this block comment is actually a convinient way to write comments in tcl-->
			<zone name="tcl.comment.block"><!--can not catch markup in first line - this is the problem of the tcl comment syntax because there are no real block comments... -->
			    <starts-with>
			        <expression>(?&lt;=;|\s|^|\s\{)(#)[^\d]?.*?(?&lt;!\\)\\\s*\n</expression>
			        <capture number="1" name="punctuation.definition.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>[^\\]\s*\n|^\s*\n</expression><!--TODO: don´t know why i can not catch empty line ...-->
			    </ends-with>
			    <subzones>
			    	<include collection="Markup"/>
			    </subzones>
			</zone>
			
			<zone name="tcl.comment.line">
				<starts-with>
			    	<expression>(?&lt;=;|\s|^|\s\{)(#)[^\d]?</expression>
			    	<capture number="1" name="punctuation.definition.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>\s*$</expression>
			    </ends-with>
			    <subzones>
			    	<include collection="Markup"/>
			    </subzones>
			</zone>
			
			<zone name="tcl.comment.block"><!--awkward tcl block comment ;)-->
			    <starts-with>
			        <expression>if\s+0\s+\{</expression>
			    </starts-with>
			    <ends-with>
			        <expression>\}</expression>
			    </ends-with>
			</zone>
		
		</collection>

		<collection name="Variables"><!--i want that all variable things get special highlight, so here are some definition-->

			<zone name="tcl.tcl-keyword.function-call.global-definition">
			    <expression>\b(global)((\s+([\w:()$]+))+)?(\s|$)</expression>
			    <capture number="1" name="tcl.command.function-call.proc-global"/>
			    <capture number="2" name="tcl.var"/>
			</zone>
			<zone name="tcl.tcl-keyword.set-definition">
			    <expression>\b(set)\s+([\w:()$]+)?</expression>
			    <capture number="1" name="tcl.command.function-call.command-set"/>
			    <capture number="2" name="tcl.var"/>
			</zone>
			<zone name="tcl.tcl-keyword.function-call.unset-definition">
			    <expression>(\bunset)(\s+-nocomplain)?((\s+([^{};]+))+)?</expression>
			    <capture number="1" name="tcl.command.function-call.unset-global"/>
			    <capture number="2" name="tcl.tcl-keyword.property-name"/>
			    <capture number="3" name="tcl.unset-var"/>
			</zone>
			<zone name="tcl.tcl-keyword.append-definition">
			    <expression>\b(l?append)\s+([\w:]+)?</expression>
			    <capture number="1" name="tcl.command.function-call.command-append"/>
			    <capture number="2" name="tcl.var"/>
			</zone>
			<zone name="tcl.tcl-keyword.rename-definition">
			    <expression>\b(rename)\s+([\w:]+)?\s+([\w:]+)?</expression>
			    <capture number="1" name="tcl.command.function-call.command-rename"/>
			    <capture number="2" name="tcl.unset-var.rename-var"/>
			    <capture number="3" name="tcl.var"/>
			</zone>
			<zone name="tcl.tcl-keyword.array-dict-unset-definition">
			    <expression>\b(array|dict)\s+(unset)\s+([\w:]+)?</expression>
			    <capture number="1" name="tcl.command.function-call.command-array-dict-unset"/>
			    <capture number="2" name="tcl.options.array-dict"/>
			    <capture number="3" name="tcl.unset-var"/>
			</zone>
			<zone name="tcl.tcl-keyword.array-dict-set-definition">
			    <expression>\b(array|dict)\s+(set)\s+([\w:]+)?</expression>
			    <capture number="1" name="tcl.command.function-call.command-array-dict-unset"/>
			    <capture number="2" name="tcl.options.array-dict"/>
			    <capture number="3" name="tcl.var"/>
			</zone>
						
		</collection>
		
		<collection name="FlowControl">
		
			<zone name="tcl.keyword.control.start">
				<expression>\b(for(?:each)?|while|if|(?:tr|finall)y)\b|(?&lt;!\?)\?(?!\?)</expression>
			</zone>
			<!--switch has options, so it needs function.call zone-->
			<zone name="tcl.keyword.control.function-call.start">
				<expression>\b(switch)\b</expression>
			</zone>
		
			<zone name="tcl.keyword.control.additional">
				<expression>\b(else(?:if)?|then)\b|(?&lt;!:):(?!:)</expression>
			</zone>
					
			<zone name="tcl.keyword.control.flow">
				<expression>\b(break|continue)\b</expression>
			</zone>
		
		</collection>
		
		<collection name="Strings"><!--yeah, i know this is not a Tcl String def - ESIAS... ;)-->
			
			<zone name="tcl.container.string.quoted.double.subst">
			    <starts-with>
			        <expression>"</expression>
			        <capture number="0" name="tcl.punctuation.doublequote.string.quoted.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>"</expression>
			        <capture number="0" name="tcl.punctuation.doublequote.string.quoted.end"/>
			    </ends-with>
			    <subzones>
			    	<include collection="Numeric" />
			    	<include collection="EscapeChar"/>
			    	<include collection="VariableExpansion" />
			    	<include collection="FormatSpecifier"/>
			    	<include collection="Operators" />
			    	<include collection="Math" />
			    	<include collection="General" />
			    	<include collection="Brackets" />
			    </subzones>
			</zone>
		
		</collection>
        
        <collection name="Operators"><!--(?=\$|\s|\[|\d) makes the zone more specific so that no syntax highlighting for strings which have e.g. test-test-->
            
           	<zone name="tcl.tcl-operator.comparison.tcl-binary">
        	    <expression>(?&lt;!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)(?:(=|!)=|&lt;=?|>=?)(?!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)</expression>
        	</zone>
        	        	
        	<zone name="tcl.tcl-operator.logical.tcl-binary">
        	    <expression>(?&lt;!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)(\|\||&amp;&amp;)(?!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)</expression>
        	</zone>
        	
        	<zone name="tcl.tcl-operator.logical.tcl-unary">
        	    <expression>(?&lt;!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)(!)(?!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)</expression>
        	</zone>
        	
        	<zone name="tcl.tcl-operator.bitwise">
        	    <expression>(?&lt;!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)(&gt;&gt;|&lt;&lt;|\||\^|&amp;|~)(?!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)</expression>
        	</zone>
        	
        	<zone name="tcl.tcl-operator.arithmetic.tcl-unary">
        	    <expression>(?&lt;!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)(\+|-)(?=\$|\[|"|\{)</expression>
        	</zone>
        	        	
        	<zone name="tcl.tcl-operator.arithmetic.tcl-binary">
        	    <expression>(?&lt;!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)(\+|-|\*\*?|\/|%)(?!\+|-|\*|\/|%|&gt;|&lt;|\||\^|&amp;|~|!|=)</expression>
        	</zone>
        	        	
        </collection>
        <!--these procuce syntax error when quoted so there is a extra definition to exclude it from quoted stuff:-->
        <collection name="OperatorsNotInQuotesAllowed">
        	
        	<zone name="tcl.tcl-operator.comp-string">
        	    <expression>\b(ne|eq)\b</expression>
        	</zone>
        	<zone name="tcl.tcl-operator.list-test">
        	    <expression>\b(in|ni)\b</expression>
        	</zone>
        	
        </collection>
        
        <collection name="FormatSpecifier">
			<zone name="tcl.keyword.format-specifier.string-format">
                	<expression>%(\d(?:\.\d)?\$)?([-\+#0[:space:]])?([\d]+)?([\.\d*]+)?([cdEefgGiouxXqs])</expression>
                	<capture number="1" name="tcl.keyword.additional.format-number"/>
                	<capture number="2" name="tcl.keyword.additional.format-flags"/>
                	<capture number="3" name="tcl.keyword.additional.format-width"/>
                	<capture number="4" name="tcl.keyword.additional.format-precision"/>
				<capture number="5" name="tcl.keyword.additional.format-type"/>
			</zone>
		</collection>
        
        <collection name="VariableExpansion">
        	<include collection="ArrayVariableExpansion" />
        	<include collection="OtherVariableExpansion" />
        	<include collection="SingleVariableExpansion" />
        </collection>
        
        <collection name="SingleVariableExpansion">
        	<zone name="tcl.definition.expand.subst">
        		<expression>(::)?(\$)([\w:]+)</expression>
        		<capture number="1" name="tcl.punctuation.namespace"/>
        		<capture number="2" name="tcl.vvariable.dollar"/>
        		<capture number="3" name="vvariable"/>
        	</zone>
        </collection>
        
        <collection name="OtherVariableExpansion">
        	<zone name="tcl.definition.expand.subst">
        		<starts-with>
        		    <expression>(::)?(\$)(\{)</expression>
        		    <capture number="1" name="tcl.punctuation.namespace"/>
        		    <capture number="2" name="tcl.vvariable.dollar"/>
        		    <capture number="3" name="tcl.punctuation.open-brace"/>
        		</starts-with>
        		<ends-with>
        		    <expression>\}</expression>
        		    <capture number="0" name="tcl.punctuation.close-brace"/>
        		</ends-with>
        		<subzones name="vvariable">
        			<include collection="VariableExpansion" />
        		</subzones>
        	</zone>
        </collection>
        
        <collection name="ArrayVariableExpansion">
        	<zone name="tcl.definition.expand.subst">
        		<starts-with>
        		    <expression>(::)?(\$)([\w:]+)(\()</expression>
        		    <capture number="1" name="tcl.punctuation.namespace"/>
        		    <capture number="2" name="tcl.vvariable.dollar"/>
        		    <capture number="3" name="vvariable"/>
        		    <capture number="4" name="tcl.punctuation.open-parenthesis"/>
        		</starts-with>
        		<ends-with>
        		    <expression>\)</expression>
        		    <capture number="0" name="tcl.punctuation.close-parenthesis"/>
        		</ends-with>
        		<subzones name="vvariable">
        			<include collection="VariableExpansion" />
        		</subzones>
        	</zone>
        </collection>
        
        <collection name="tclLanguage">
                
        	<zone name="tcl.punctuation.delimiter.terminator">
        		<expression>;</expression>
        	</zone>
        	<zone name="tcl.punctuation.delimiter.backslash">
        		<expression>\\\s*?[\n\r]</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.argument-expansion">
        		<expression>\{\*\}</expression>
        	</zone>
        	<!--for regex/regsub syntax highlighting (variable(s) at end of command), works only when the searched string is a single zone see Tcl.css (no way to get it better :()-->
			<zone name="tcl.regex">
        		<starts-with>
        			<expression>\b(regsub|regexp)\s+((?:-\w+\s+)+)?(\{)</expression>
        			<capture number="1" name="tcl.command.function-call"/>
        			<capture number="2" name="tcl.tcl-keyword.property-name"/>
        			<capture number="3" name="tcl.punctuation.open-brace"/>
        		</starts-with>
        		<ends-with>
        			<expression>(\})</expression>
        			<capture number="1" name="tcl.punctuation.close-brace"/>
        		</ends-with>
        		<subzones>
        			<include syntax="language-root.tcl" />
        		</subzones>
        	</zone>
        	<!--regex switch in e.g. lsearch-->
        	<zone name="tcl.container.regex.tcl-keyword.switch-regexp">
        		<starts-with>
        			<expression>(-regexp)\s+(\{)</expression>
        			<capture number="1" name="tcl.tcl-keyword.property-name"/>
        			<capture number="2" name="tcl.punctuation.open-brace"/>
        		</starts-with>
        		<ends-with>
        			<expression>(\})</expression>
        			<capture number="1" name="tcl.punctuation.close-brace"/>
        		</ends-with>
        		<subzones>
        			<include syntax="language-root.tcl" />
        		</subzones>
        	</zone>
        	<!--catch assigns a variable so here is a zone definition for it-->
        	<zone name="tcl.container.function-call-catch">
        	    <starts-with>
        	        <expression>\b(catch)\s+(\{)</expression>
        	        <capture number="1" name="tcl.command.function-call"/>
        	        <capture number="2" name="tcl.punctuation.open-brace"/>
        	    </starts-with>
        	    <ends-with>
        	        <expression>(\})(?:\s+([\w:()]+)(\s+[\w:()]+)?)?</expression>
        	        <capture number="1" name="tcl.punctuation.close-brace"/>
        	        <capture number="2" name="tcl.var.catch-var"/>
        	        <capture number="3" name="tcl.var.catch-options-var"/>
        	    </ends-with>
        	    <subzones>
        	    	<include syntax="language-root.tcl" />
        	    </subzones>
        	</zone>
        	<!--that expr don´t get mixed up with math functions and parenthesis can be highlighted:-->
        	<zone name="tcl.container.function-call-expr">
        	    <starts-with>
        	        <expression>\b(expr)\s+(\()</expression>
        	        <capture number="1" name="tcl.command.function-call"/>
        	        <capture number="2" name="tcl.punctuation.open-parenthesis"/>
        	    </starts-with>
        	    <ends-with>
        	        <expression>\)</expression>
        	        <capture number="0" name="tcl.punctuation.close-parenthesis"/>
        	    </ends-with>
        	    <subzones>
        	    	<include collection="Operators" />
        	    	<include collection="Parenthesis" />
        	    	<include syntax="language-root.tcl" />
        	    </subzones>
        	</zone>
        	
        	<!--here comes zones which maybe produce nameclashes, especially with amira syntax and also with other keywords so they are more specific-->
        	<zone>
        	    <expression>\b(prefix)(\s+)(all|longest|match)\b</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.prefix"/>
        	</zone>
        	<zone>
        		<expression>\b(trace)(\s+)(add(\s+(command|execution|variable))?|remove(\s+(command|execution|variable))?|info(\s+(command|execution|variable))?|v(?:ariable|delete|info))\b</expression>
        		<capture number="1" name="tcl.command.function-call"/>
        		<capture number="2" name="tcl.s"/>
        		<capture number="3" name="tcl.options.trace"/>
        	</zone>
        	<zone>
        	    <expression>\b(string)(\s+)(bytelength|(?:compar|rang)e|equal|first|index|l(?:ast|ength)|ma(?:p|tch)|re(?:peat|place|verse)|to(?:lower|title|upper)|trim(?:left|right)?|word(?:end|start))\b</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.string"/>
        	</zone>
        	<zone>
        	    <expression>\b(string)(\s+)(?:(is)(\s+)(al(?:num|pha)|ascii|boolean|control|d(?:igit|ouble)|graph|(?:intege|uppe)r|l(?:ist|ower)|p(?:rint|unct)|(?:spac|tru|fals)e|w(?:ideinteger|ordchar)|xdigit))\b</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.string"/>
        	    <capture number="4" name="tcl.s"/>
        	    <capture number="5" name="tcl.options.string"/>
        	</zone>
        	<zone>
        		<expression>\b(source)(\s+)(-encoding)?</expression>
        		<capture number="1" name="tcl.command.function-call"/>
        		<capture number="2" name="tcl.s"/>
        		<capture number="3" name="tcl.tcl-keyword.property-name"/>
        	</zone>
        	<zone>
        	    <expression>\b(dict)(\s+)(create|exists|f(?:ilter|or)|get|in(?:cr|fo)|keys|l?append|re(?:mov|plac)e|s(?:et|ize)|u(?:nset|pdate)|values|with|m(?:ap|erge))\b</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.dict"/>
        	</zone>
        	<zone>
        	    <expression>\b(array)(\s+)(anymore|donesearch|exists|n(?:ames|extelement)|s(?:et|ize)|sta(?:rtsearch|tistics)|(?:g|uns)et)\b</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.array"/>
        	</zone>
			
			<zone>
			    <expression>\b(info)(\s+)(object|class)(\s+)(methods)\b</expression>
			    <capture number="1" name="tcl.command.function-call"/>
			    <capture number="2" name="tcl.s"/>
			    <capture number="3" name="tcl.options.info"/>
			    <capture number="4" name="tcl.s"/>
			    <capture number="5" name="tcl.options.info"/>
			</zone>
        	<zone>
        	    <expression>\b(info)(\s+)(class(?:\s+(?:c(?:all|onstructor)|de(?:finition|structor)|f(?:ilters|orward)|instances|methodtype|mixins|(?:(?:su(?:b|per))class|variabl)es))?)\b</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.info"/>
        	</zone>
        	<zone>
        	    <expression>\b(info)(\s+)(object(?:\s+(?:c(?:all|lass)|definition|f(?:ilters|orward)|m(?:ethodtype|ixins)|namespace|var(?:iable)?s)))\b</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.info"/>
        	</zone>
        	<zone>
        	    <expression>\b(info)(\s+)(object)(\s+)(isa\s+(?:m(?:etaclass|ixin)|class|object|typeof)\b)?</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.info"/>
        	    <capture number="4" name="tcl.s"/>
        	    <capture number="5" name="tcl.options.info"/>
        	</zone>
        	<zone>
        	    <expression>\b(info)(\s+)(nameofexecutable|(?:var|arg)s|body|c(?:om(?:mands|plete)|oroutine|lass|mdcount)|default|e(?:rrorstack|xists)|f(?:rame|unctions)|globals|hostname|l(?:evel|ibrary|o(?:aded|cals))|p(?:atchlevel|rocs)|s(?:cript|haredlibextension)|tclversion)\b</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.info"/>
        	</zone>
        	 <!--the '.s' in zone 'tcl.punctuation.namespace.s' allows to use the normal "space" mechanism for :: commands-->
        	<zone>
				<expression>(::)?(msgcat)(::)(mc(?:max|preferences|lo(?:ad|cale)|m?set|unknown)?)\b</expression>
					<capture number="1" name="tcl.punctuation.namespace"/>
					<capture number="2" name="tcl.command.function-call"/>
					<capture number="3" name="tcl.punctuation.namespace.s"/>
					<capture number="4" name="tcl.options.msgcat"/>
			</zone>
			<zone>
			    <expression>(::)?(http)(::)(co(?:nfig|de)|geturl|formatQuery|(?:rese|wai)t|data|error|s(?:tatus|ize)|ncode|meta|cleanup|(?:un)?register)\b</expression>
			    <capture number="1" name="tcl.punctuation.namespace"/>
			    <capture number="2" name="tcl.command.function-call"/>
			    <capture number="3" name="tcl.punctuation.namespace.s"/>
			    <capture number="4" name="tcl.options.http"/>
			</zone>
			<zone>
			    <expression>(::)?(oo)(::)(object)(\s+)(destroy|eval|unknown|variable|varname|&lt;cloned&gt;)\b</expression>
			    <capture number="1" name="tcl.punctuation.namespace"/>
			    <capture number="2" name="tcl.command.function-call"/>
			    <capture number="3" name="tcl.punctuation.namespace.s"/>
			    <capture number="4" name="tcl.options.oo"/>
			    <capture number="5" name="tcl.punctuation.s"/>
			    <capture number="6" name="tcl.options.oo"/>
			</zone>
			<zone>
			    <expression>(::)?(oo)(::)(copy)\b</expression>
			    <capture number="1" name="tcl.punctuation.namespace"/>
			    <capture number="2" name="tcl.command.function-call"/>
			    <capture number="3" name="tcl.punctuation.namespace.s"/>
			    <capture number="4" name="tcl.options.oo"/>
			</zone>
			<zone>
			    <expression>(::)?(oo)(::)(define|class)\b</expression>
			    <capture number="1" name="tcl.punctuation.namespace"/>
			    <capture number="2" name="tcl.command.function-call"/>
			    <capture number="3" name="tcl.punctuation.namespace.s"/>
			    <capture number="4" name="tcl.options.oo.oo-class"/>
			</zone>
			<zone>
			    <expression>(::)?(oo)(::)(objdefine|object)\b</expression>
			    <capture number="1" name="tcl.punctuation.namespace"/>
			    <capture number="2" name="tcl.command.function-call"/>
			    <capture number="3" name="tcl.punctuation.namespace.s"/>
			    <capture number="4" name="tcl.options.oo.oo-object"/>
			</zone>
        	<zone>
        	    <expression>\b(file)(\s+)(at(?:ime|tributes)|c(?:hannels|opy)|d(?:elete|irname)|ex(?:ecutable|ists|tension)|is(?:directory|file)|join|l(?:ink|stat)|m(?:kdir|time)|n(?:ativename|ormalize)|owned|pathtype|re(?:ad(?:able|link)|name)|rootname|s(?:eparator|ize|(?:pli|ta)t|ystem)|t(?:ail|(?:empfil|yp)e)|volumes|writable)\b</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.file"/>
        	</zone>
        	<zone>
        		<expression>\b(package)(\s+)(forget|ifneeded|names|pr(?:esent|ovide|efer)|require|unknown|v(?:(?:satisfie|ersion)s|compare))\b</expression>
        		<capture number="1" name="tcl.command.function-call"/>
        		<capture number="2" name="tcl.s"/>
        		<capture number="3" name="tcl.options.package"/>
        	</zone>
        	<zone>
        	    <expression>\b(chan)(\s+)(blocked|c(?:lose|o(?:nfigure|py)|reate)|e(?:of|vent)|flush|(?:get|name)s|p(?:ending|ipe|o(?:p|stevent)|u(?:sh|ts))|seek|t(?:ell|runcate)|read)\b</expression>
        	    <capture number="1" name="tcl.command.function-call"/>
        	    <capture number="2" name="tcl.s"/>
        	    <capture number="3" name="tcl.options.chan"/>
        	</zone>
			<zone>
				<expression>\b(namespace)(\s+)(c(?:hildren|ode|urrent)|delete|e(?:val|x(?:ists|port))|(?:forge|impor)t|inscope|origin|pa(?:rent|th)|qualifiers|tail|upvar|unknown|which)\b</expression>
				<capture number="1" name="tcl.command.function-call"/>
				<capture number="2" name="tcl.s"/>
				<capture number="3" name="tcl.options.option-namespace"/>
			</zone>
			
			<zone>
				<expression>\b(namespace)(\s+)(?:(ensemble)(\s+)(c(?:(?:reat|onfigur)e)|exists))?\b</expression>
				<capture number="1" name="tcl.command.function-call"/>
				<capture number="2" name="tcl.s"/>
				<capture number="3" name="tcl.options.option-namespace"/>
				<capture number="4" name="tcl.s"/>
				<capture number="5" name="tcl.options.option-namespace"/>
			</zone>
			<zone>
				<expression>\b(after)(\s+)(cancel|idle|info)\b</expression>
				<capture number="1" name="tcl.command.function-call"/>
				<capture number="2" name="tcl.s"/>
				<capture number="3" name="tcl.options.after"/>
			</zone>
			<zone>
				<expression>\b(history)(\s+)(add|c(?:hange|lear)|event|(?:inf|red)o|keep|nextid)\b</expression>
				<capture number="1" name="tcl.command.function-call"/>
				<capture number="2" name="tcl.s"/>
				<capture number="3" name="tcl.options.history"/>
			</zone>
			<zone>
				<expression>\b(zlib)(\s+)(?:(compress|de(?:compress|flate)|g(?:un)?zip|inflate|(?:adler|crc)32)|(push)(?:(\s+)(compress|de(?:compress|flate)|g(?:un)?zip|inflate))?|(stream)(?:(\s+)(compress|de(?:compress|flate)|g(?:un)?zip|inflate))?)\b</expression>
				<capture number="1" name="tcl.command.function-call"/>
				<capture number="2" name="tcl.s"/>
				<capture number="3" name="tcl.options.zlib"/>
				<capture number="4" name="tcl.options.zlib"/>
				<capture number="5" name="tcl.s"/>
				<capture number="6" name="tcl.options.zlib"/>
				<capture number="7" name="tcl.options.zlib"/>
				<capture number="8" name="tcl.s"/>
				<capture number="9" name="tcl.options.zlib"/>
			</zone>
			<zone>
				<expression>\b(binary)(\s+)(?:((?:en|de)code)(\s+)(base64|hex|uuencode))\b</expression>
				<capture number="1" name="tcl.command.function-call"/>
				<capture number="2" name="tcl.s"/>
				<capture number="3" name="tcl.options.binary"/>
				<capture number="4" name="tcl.s"/>
				<capture number="5" name="tcl.options.binary"/>
			</zone>
			<zone>
				<expression>\b(binary)(\s+)(scan|format)\b</expression>
				<capture number="1" name="tcl.command.function-call"/>
				<capture number="2" name="tcl.s"/>
				<capture number="3" name="tcl.options.binary"/>
			</zone>
			<zone>
			    <expression>\b(clock)(\s+)(add|clicks|format|(?:micro|milli)?seconds|scan)\b</expression>
			    <capture number="1" name="tcl.command.function-call"/>
			    <capture number="2" name="tcl.s"/>
			    <capture number="3" name="tcl.options.clock"/>
			</zone>
			<zone>
			    <expression>\b(encoding)(\s+)(confert(?:to|from)|(?:dir|name)s|system)\b</expression>
			    <capture number="1" name="tcl.command.function-call"/>
			    <capture number="2" name="tcl.s"/>
			    <capture number="3" name="tcl.options.clock"/>
			</zone>
			<zone>
			    <expression>\b(interp)(\s+)(alias(?:es)?|bgerror|c(?:ancel|reate)|de(?:bug|lete)|e(?:val|x(?:ists|pose))|hid(?:e|den)|i(?:nvokehidden|ssafe)|limit|marktrusted|recursionlimit|s(?:hare|laves)|t(?:arget|ransfer))\b</expression>
			    <capture number="1" name="tcl.command.function-call"/>
			    <capture number="2" name="tcl.s"/>
			    <capture number="3" name="tcl.options.interp"/>
			</zone>
			
			<zone>
			    <expression>\b(memory)(\s+)(active|break_on_malloc|trace_on_at_malloc|info|o(?:bjs|nexit)|tag|(?:trace|init|validate)(\s+)(on|off))\b</expression>
			    <capture number="1" name="tcl.command.function-call"/>
			    <capture number="2" name="tcl.s"/>
			    <capture number="3" name="tcl.options.memory"/>
			    <capture number="4" name="tcl.s"/>
			    <capture number="5" name="tcl.options.memory"/>
			</zone>
			
        	<zone name="tcl.command.function-call">
        		<expression>\b(e(?:rror|of|val|x(?:ec|it|pr))|a(?:dd|fter|pply)|f(?:ormat|inalize|ile(?:name|event)|co(?:py|nfigure)|blocked|lush)|tcl(?:Log|sh|vars|test|Pkg(?:Unknown|Setup)|_(?:wordBreak(?:Before|After)|startOf(?:(?:Previous|Next)Word)|endOfWord|findLibrary))|catch|re(?:_syntax|gistry|ad|(?:tur|fcha)n|g(?:exp|sub))|p(?:array|kg::create|kg_mkIndex|id|wd|uts?|latform(?:::shell)?)|l(?:append|assign|s(?:e(?:arch|t)|ort)|map|i(?:st|n(?:dex|sert))|length|r(?:e(?:place|verse|peat)|ange))|auto_(?:execok|load|import|reset|qualify|load_index)|t(?:ell|ime|m)|b(?:gerror|inary)|(?:un)?load|m(?:y|ath(?:func|op)|kindex(?:_old)?)|u(?:nknown|p(?:var|date|level))|g(?:ets?|lobal|lob)|c(?:d|hecksum|lose|oncat|oroutine)|h(?:istory|ttp)|n(?:amespace|ext(?:to)?)|open|dde|incr|s(?:plit|afe|can|e(?:t|ek)|ocket|ubst)|Tcl|join|v(?:ariable|wait)|yield(?:to)?)(?=\s|\]|;)</expression>
        	</zone>
        	
        	<!--env is an array, so capturing '(' and ')'-->
        	<zone name="tcl.global-array">
        		<starts-with>
        			<expression>(env)(\()</expression>
        			<capture number="1" name="tcl.keyword.global.global-variables"/>
        			<capture number="2" name="tcl.punctuation.open-parenthesis"/>
        		</starts-with>
        		<ends-with>
        			<expression>\)</expression>
        			<capture number="0" name="tcl.punctuation.close-parenthesis"/>
        		</ends-with>
        		<subzones>
        			<include syntax="language-root.tcl" />
        		</subzones>
        	</zone>
        	
        	<zone name="tcl.keyword.global.global-variables">
        		<expression>\b(a(?:uto_(?:execs|index|noexec|noload|path)|rg(?:s|c|v|v0)?)|e(?:nv|rror(?:Code|Info))|tcl_(?:lib(?:rary|Path)|p(?:atchLevel|latform|kgPath|recision)|rc(?:(?:File|Rsrc)Name)|trace(?:Compile|Exec)|(?:non)?wordchars|version|prompt(?:1|2)|interactive)|geometry|TCL_(?:ERROR|RETURN|(?:BREA|O)K|CONTINUE))\b</expression>
        	</zone>
        	<!--catches all switches in tcl (e.g. "-switch"):-->
        	<zone name="tcl.tcl-keyword.property-name">
        		<expression>(?&lt;=\s|^)-[\w?!]+\b|(?&lt;![\w?!])--(?=\s|\\)</expression>
        	</zone>
        	
        	<!--this two zones are for the options when used as subcommands in ::oo, discerning between the two is not possible, because the options have mostly the same name and none is the complete subset of the other, but Tcl.css placeholder file handles it as good as it can-->
        	<zone name="tcl.options.options-oo.objdefine">
        	    <expression>\b(class|deletemethod|export|f(?:ilter|orward)|m(?:ethod|ixin)|renamemethod|unexport|variable)\b</expression>
        	</zone>
        	<zone name="tcl.options.options-oo.define">
        	    <expression>\b(constructor|de(?:letemethod|structor)|export|f(?:ilter|orward)|m(?:ethod|ixin)|renamemethod|s(?:elf|uperclass)|unexport|variable)\b</expression>
        	</zone>
        			
			<zone name="tcl.options.close">
			    <expression>\b(read|write)\b</expression>
			</zone>
			
			<zone name="tcl.options.try">
			    <expression>\b(on|trap)\b</expression>
			</zone>
															
			<zone name="tcl.options.dict.filter">
				<expression>\b(key|script|value)\b</expression>
			</zone>
						
			<zone name="tcl.options.chan-seek-seek">
				<expression>\b(start|end|current)\b</expression>
			</zone>
			
			<zone name="tcl.options.refchan-transchan">
				<expression>\b((?:initi|fin)alize|w(?:atch|rite)|read|seek|c(?:onfigure|get(?:all)?|lear)|blocking|drain|limit\?|flush)\b</expression>
			</zone>
						
			<zone name="tcl.options.clock">
				<expression>\b(scan|clicks|format|seconds)\b</expression>
			</zone>
			
			<zone name="tcl.options.dde">
				<expression>\b(e(?:val|xecute)|poke|request|serv(?:ername|ices))\b</expression>
			</zone>
			
			<zone name="tcl.options.encoding">
				<expression>\b(names|system|convert(?:from|to))\b</expression>
			</zone>
			
			<zone name="tcl.options.fileevent">
				<expression>\b((?:read|writ)able)\b</expression>
			</zone>
			
			<!--mathop is a little special ...-->
			<zone name="tcl.command.function-call.mathop.upd">
				<expression>(::)tcl(::)mathop(::)</expression>
				<capture number="1" name="tcl.punctuation.namespace"/>
				<capture number="2" name="tcl.punctuation.namespace"/>
				<capture number="3" name="tcl.punctuation.namespace"/>
			</zone>
			
			<!--namespaces-->
			<!--.upd is for namespace upvar syntax -> see word.upd and Tcl.css-->
			<zone name="tcl.command.function-call.namespaces.upd">
					<starts-with>
				    <expression>(?:[\w?!\.]+)?(:{2,})(?=[\w?!\.])</expression>
				    <capture number="1" name="tcl.punctuation.namespace"/>
				</starts-with>
				<ends-with>
				    <expression>(?=[^\w?!:\.]|\s)</expression>
				</ends-with>
				<subzones>
					<zone>
						<expression>(:{2,})(?:[\w?!\.]*)</expression>
						<capture number="1" name="tcl.punctuation.namespace"/>
					</zone>
				</subzones>
			</zone>
						            
        </collection>
        
        <collection name="Math">
        	
        	<!--tcl has some parenthesis syntactical sugar for math (since tcl 8.5 one can define individual math functions, but this can not be handled with Espresso zone syntax, because it would conflict with EIAS in tcl)-->
        	<zone name="tcl.container.math">
        		<starts-with>
        			<expression>\b(a(?:(?:b|co)s|sin|tan2?)|bool|c(?:eil|osh?)|double|e(?:ntier|xp)|f(?:loor|mod)|hypot|i(?:nt|sqrt)|log(?:10)?|m(?:ax|in)|pow|r(?:(?:a|ou)nd)|s(?:inh?|qrt|rand)|tanh?|wide)\s*(\()</expression>
        			<capture number="1" name="tcl.tcl-operator.function-call.operator"/>
        			<capture number="2" name="tcl.punctuation.open-parenthesis"/>
        		</starts-with>
        		<ends-with>
        			<expression>\)</expression>
        			<capture number="0" name="tcl.punctuation.close-parenthesis"/>
        		</ends-with>
        		<subzones>
        			<include collection="Operators" />
        			<include collection="Parenthesis" />
        			<include syntax="language-root.tcl" />
        			<zone>
        				<expression>,</expression>
        				<capture number="0" name="tcl.keyword.punctuation.comma"/>
        			</zone>
        		</subzones>
        	</zone>
        	<zone>
        		<expression>\b(a(?:(?:b|co)s|sin|tan2?)|bool|c(?:eil|osh?)|double|e(?:ntier|xp)|f(?:loor|mod)|hypot|i(?:nt|sqrt)|log(?:10)?|m(?:ax|in)|pow|r(?:(?:a|ou)nd)|s(?:inh?|qrt|rand)|tanh?|wide)\b</expression>
        		<capture number="1" name="tcl.tcl-operator.command.function-call.operator"/>
        	</zone>
        	
        </collection>
        
        <collection name="Numeric">
        
        	<zone name="tcl.constant.language.options.numeric.end">
        		<expression>\bend\b</expression>
        	</zone>
        
        	<zone name="tcl.numeric.level-specifier">
        		<expression>(?&lt;![\w?!:\-\.\$])#\d+\b</expression>
        	</zone>
        	
        	<zone><!--"." after number-->
        		<expression>(?&lt;![\w!\.\$])(-?\d+\.)(?!\w)</expression>
        		<capture number="1" name="tcl.constant.numeric.point"/>
        	</zone>
        	
   			<zone name="tcl.numeric.normal">
				<expression>(?&lt;![\w!\.\$])((-?\d+(\.\d+)?([eE][+-]?\d+)?|-?\.\d+([eE]-?\d+)?))(?!\w|\.[\w?!:\.])</expression>
			</zone>
			
			<zone name="tcl.numeric.octal">
				<expression>\\[0-7]{1,3}\b</expression>
			</zone>
			
			<zone name="tcl.numeric.hexadecimal">
				<expression>\\0?x\h{1,2}\b</expression>
			</zone>
			
			<zone name="tcl.numeric.unicode">
				<expression>(?:\\u\h{1,4}|\\U\h{1,8})\b</expression>
			</zone>
			
        </collection>
        
        <collection name="General">
        
        	<zone name="tcl.language.word.array.upd.subst">
        		<starts-with>
        			<expression>(?&lt;=\s|^)([\w\.\-]+)(\()</expression>
        			<capture number="1" name="language.word.upd.subst"/>
        			<capture number="2" name="tcl.punctuation.open-parenthesis"/>
        		</starts-with>
        		<ends-with>
        			<expression>\)</expression>
        			<capture number="0" name="tcl.punctuation.close-parenthesis"/>
        		</ends-with>
        		<subzones>
        			<include syntax="language-root.tcl" />
        		</subzones>
        	</zone>
        	
        	<zone name="tcl.language.word.upd.subst"> 
        		<expression>(?&lt;=\s|^)([\w\.\-]+)</expression>
        	</zone>
        	
        </collection>
        
        <collection name="EscapeChar">
        	<zone name="tcl.escape.character">
        	    <expression>(\\).</expression>
        	    <capture number="1" name="tcl.punctuation.delimiter.backslash"/>
        	</zone>
        </collection>
        
	</library>
    
</syntax>