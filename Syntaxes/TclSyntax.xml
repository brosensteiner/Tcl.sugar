<?xml version="1.0" encoding="UTF-8"?>
<!--
@description Defines the Tcl syntax
@author 	 Bernhard Rosensteiner <brosensteiner@gmail.com>
@copyright 	 The MIT License

Copyright (c) 2012 Bernhard Rosensteiner

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<syntax name="source.Tcl">

    <zones>
    
    	<include collection="Invalid" />
    	
    	<zone name="tcl.shebang">
    	    <expression>^#!\\.+\\(tclsh|wish)|^#!\\.+\\env\s+tclsh</expression>
    	</zone>
    	
    	<include collection="Comments" />
    	<include collection="Numeric" />
    	<include collection="AmiraExtension" />
    	<include collection="tclLanguage" />
		<include collection="FormatSpecifier"/>
    	<include collection="Variables" />
    	<include collection="Operators" />
    	<include collection="Strings"/>
    	<include collection="FlowControl" />
    	<include collection="General" />
        <include collection="Balanced" />
		
    </zones>
    
	<library>
	
		<collection name="Balanced">
		
			<zone name="tcl.balanced.parenthesis">
					<starts-with>
						<expression>\(</expression>
						<capture number="0" name="tcl.punctuation.open-parenthesis"/>
					</starts-with>
					<ends-with>
						<expression>\)</expression>
							<capture number="0" name="tcl.punctuation.close-parenthesis"/>
					</ends-with>
					<subzones>
						<include syntax="source.Tcl" />
					</subzones>
				</zone>
				
				<zone name="tcl.balanced.braces">
					<starts-with>
						<expression>(?&lt;=\s|\[)\{</expression>
						<capture number="0" name="tcl.punctuation.open-brace"/>
					</starts-with>
					<ends-with>
						<expression>\}</expression>
							<capture number="0" name="tcl.punctuation.close-brace"/>
					</ends-with>
					<subzones>
						<include syntax="source.Tcl" />
					</subzones>
				</zone>
				
				<zone name="tcl.balanced.brackets">
					<starts-with>
						<expression>\[</expression>
						<capture number="0" name="tcl.punctuation.open-bracket"/>
					</starts-with>
					<ends-with>
						<expression>\]</expression>
							<capture number="0" name="tcl.punctuation.close-bracket"/>
					</ends-with>
					<subzones>
						<include syntax="source.Tcl" />
					</subzones>
				</zone>
			
		</collection>
	
		<!--some invalid syntax (will eventually be more over time)-->
		<collection name="Invalid">
		
			<zone name="tcl.language.invalid.comment.semicolon">
			    <expression>;\s+?#[^\d].*$\n?</expression>
			</zone>
			
		</collection>
	
		<collection name="Comments">
			
			<zone name="tcl.comment.line.hash">
			    <expression>(#)[^\d].*$\n?</expression>
			    <capture number="1" name="tcl.punctuation.definition.comment"/>
			</zone>
		
		</collection>
		
		<collection name="Variables"><!--i want that all variable things get special highlight, so here are some definition-->
		
			<zone name="tcl.keyword.variable.definition.upvar">
			    <expression>upvar</expression>
			</zone>
			
			<zone name="tcl.keyword.variable.definition.general">
			    <expression>\b(rename)\s+([\$a-zA-Z0-9\._]+)\s+([\$a-zA-Z0-9\._]+)</expression>
			    <capture number="1" name="tcl.keyword.variable.definition.set"/>
			    <capture number="2" name="tcl.keyword.variable.definition.oldname"/>
			    <capture number="3" name="tcl.keyword.variable.definition.newname"/>
			</zone>
			
			<zone name="tcl.keyword.variable.definition.general">
			    <expression>\b(set|lset)\s+([a-zA-Z0-9_]+)</expression>
			    <capture number="1" name="tcl.keyword.variable.definition.set"/>
			    <capture number="2" name="tcl.keyword.variable.definition.new"/>
			</zone>
			
			<zone name="tcl.keyword.variable.definition.command-global">
			    <expression>\bglobal\b</expression>
			</zone>
			
			<zone name="tcl.keyword.variable.definition.command-variable">
			    <expression>\bvariable\b</expression>
			</zone>
			
			<zone name="tcl.keyword.variable.definition.concat">
			    <expression>([a-zA-Z0-9_]*)(\.)([a-zA-Z0-9_]*)</expression>
			    <capture number="1" name="tcl.keyword.variable.definition.concat.rest"/>
			    <capture number="2" name="tcl.keyword.variable.definition.concat.point"/>
			    <capture number="3" name="tcl.keyword.variable.definition.concat.rest"/>
			</zone>
			
			<zone name="tcl.keyword.variable.definition.substitute">
			    <starts-with>
			        <expression>([a-zA-Z0-9_]*)(\$\{)</expression>
			        <capture number="1" name="tcl.keyword.variable.definition.substitute.rest"/>
			        <capture number="2" name="tcl.keyword.variable.definition.substitute.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>(\})([a-zA-Z0-9_]*)</expression>
			        <capture number="1" name="tcl.keyword.variable.definition.substitute.end"/>
			        <capture number="2" name="tcl.keyword.variable.definition.substitute.rest"/>
			    </ends-with>
			    <subzones>
			    	<include collection="EscapeChar"/>
			    </subzones>
			</zone>
			
			<zone name="tcl.keyword.variable.definition.substitute.array">
			    <starts-with>
			        <expression>([a-zA-Z0-9_]*)(\$\()</expression>
			        <capture number="1" name="tcl.keyword.variable.definition.substitute.rest"/>
			        <capture number="2" name="tcl.keyword.variable.definition.substitute.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>(\))([a-zA-Z0-9_]*)</expression>
			        <capture number="1" name="tcl.keyword.variable.definition.substitute.end"/>
			        <capture number="2" name="tcl.keyword.variable.definition.substitute.rest"/>
			    </ends-with>
			    <subzones>
			    	<include collection="EscapeChar"/>
			    </subzones>
			</zone>
						
			<zone name="tcl.variable.definition.evaluate">
			    <expression>(\$[a-zA-Z0-9_]+)\b</expression>
			</zone>
			
		</collection>
		
		<collection name="FlowControl">
			
			<zone name="tcl.keyword.control.start">
			    <expression>\b(for|while|if|foreach|switch)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.control.additional">
			    <expression>\b(elseif|else)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.control.flow">
			    <expression>\b(break|continue)\b</expression>
			</zone>
			     			
		</collection>
				
		
		<collection name="Strings">
			
			<zone name="tcl.string.quoted.double.std">
			    <starts-with>
			        <expression>(?&lt;=\s|\{|\[)"</expression>
			        <capture number="0" name="tcl.punctuation.doublequote.string.quoted.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>"</expression>
			        <capture number="0" name="tcl.punctuation.doublequote.string.quoted.end"/>
			    </ends-with>
			    <subzones>
			    
			    	<include collection="EscapeChar"/>
			    	<include collection="FormatSpecifier"/>
			    	<include collection="Balanced" />
			    	<include collection="Variables" />
			    	<include collection="General" />
			    	
			    </subzones>
			</zone>
		
		</collection>
        
        <collection name="Operators">
               
           	<zone name="tcl.keyword.operator.relational">
        	    <expression>(=|!)=|&lt;=?|>=?</expression>
        	</zone>
        	        	
        	<zone name="tcl.keyword.operator.logical">
        	    <expression>\|\||&amp;&amp;|!</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.operator.bitwise">
        	    <expression>&gt;&gt;|&lt;&lt;|\||\^|&amp;|~</expression>
        	</zone>
        	        	
        	<zone name="tcl.keyword.operator.arithmetic">
        	    <expression>\+|-|\*\*?|\/|%</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.operator.comp-string">
        	    <expression>\b(ne|eq)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.operator.list">
        	    <expression>\b(in|ni)\b</expression>
        	</zone>
        	
        </collection>
        
        <collection name="FormatSpecifier">
        	<zone name="tcl.keyword.string-format">
        		<expression>%(-|\+|#|0|[[:space:]])?(\d+)?(\.\d+)?([cdEefgGiouxXqs])</expression>
        		<capture number="1" name="tcl.keyword.additional.string-format-flags"/>
        		<capture number="2" name="tcl.keyword.additional.string-format-width"/>
        		<capture number="3" name="tcl.keyword.additional.string-format-precision"/>
        		<capture number="4" name="tcl.keyword.additional.string-format-type"/>
        	</zone>
        </collection>
        
        <collection name="tclLanguage">
        
        	<zone name="tcl.keyword.character-class.semicolon">
        		<expression>;</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.character-class.backslash">
        		<expression>\\\s*?\n</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.character-class.namespace">
        		<expression>::</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.global-procedures">
        		<expression>\b(auto_execs|auto_index|auto_noexec|auto_noload|auto_path|unknown_pending)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.variable.global-variables">
        		<expression>\b(env|errorCode|errorInfo|tcl_library|tcl_patchLevel|tcl_pkgPath|tcl_platform|tcl_precision|tcl_rcFileName|tcl_rcRsrcName|tcl_traceCompile|tcl_traceExec|tcl_wordchars|tcl_nonwordchars|tcl_version|argc|argv|argv0|tcl_interactive|geometry)\b</expression>
        	</zone>
        
			<zone name="tcl.keyword.command.math">
				<expression>\b(abs|acos|asin|atan|atan2|bool|ceil|cos|cosh|double|entier|exp|floor|fmod|hypot|int|isqrt|log|log10|max|min|pow|rand|round|sin|sinh|sqrt|srand|tan|tanh|wide)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.array">
				<expression>(?&lt;=array\s)(anymore|donesearch|exists|get|names|nextelement|set|size|startsearch|statistics|unset)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.after">
				<expression>(?&lt;=after\s)(cancel|idle|info)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.binary">
				<expression>(?&lt;=binary\s)(scan|format)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.clock">
				<expression>(?&lt;=clock\s)(clicks|format|scan|seconds)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.dde">
				<expression>(?&lt;=dde\s)(eval|execute|poke|request|servername|services)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.encoding">
				<expression>(?&lt;=encoding\s)(convertfrom|convertto|names|system)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.fileevent">
				<expression>\b(readable|writable)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.history">
				<expression>(?&lt;=history\s)(add|change|clear|event|info|keep|nextid|redo)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.namespace">
				<expression>(?&lt;=namespace\s)(children|code|current|delete|ensemble|eval|exists|export|forget|import|inscope|origin|parent|path|qualifiers|tail|upvar|unknown|which)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.trace">
				<expression>(?&lt;=trace\s)(add|remove|info|variable|vdelete|vinfo)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.trace.add-remove-info">
				<expression>(?&lt;=trace\sadd\s|trace\sremove\s|trace\sinfo\s)(command|execution|variable)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.string">
				<expression>(?&lt;=string\s)(bytelength|compare|equal|first|index|is|last|length|map|match|range|repeat|replace|reverse|tolower|totitle|toupper|trim|trimleft|trimright|wordend|wordstart)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.string-is">
				<expression>(?&lt;=string\sis\s)(alnum|alpha|ascii|boolean|control|digit|double|false|graph|integer|list|lower|print|punct|space|true|upper|wideinteger|wordchar|xdigit)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.info">
				<expression>(?&lt;=info\s)(args|body|cmdcount|commands|complete|default|exists|frame|functions|globals|hostname|level|library|loaded|locals|nameofexecutable|patchlevel|procs|script|sharedlibextension|tclversion|vars)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.info.frame">
				<expression>(?&lt;=info\sframe\s)(type|line|file|cmd|proc|lambda|level)\b</expression>
			</zone>
			<zone name="tcl.keyword.options.info.frame.type">
				<expression>(?&lt;=info\sframe\stype\s)(source|proc|eval|precompiled)\b</expression>
			</zone>
			
			
			
			<zone name="tcl.keyword.command.builtinfunc.catch"><!--catch assigns a variable we will catch so here is a zone definition for it-->
			    <starts-with>
			        <expression>\b(catch)\s+(\{)</expression>
			        <capture number="1" name="tcl.keyword.command.builtinfunc"/>
			        <capture number="2" name="tcl.punctuation.open-brace"/>
			    </starts-with>
			    <ends-with>
			        <expression>(\})</expression>
			        <capture number="1" name="tcl.punctuation.close-brace"/>
			    </ends-with>
			    <subzones>
			    	<include collection="source.Tcl"/>
			    </subzones>
			</zone>
			
			<zone name="tcl.keyword.command.function">
				<expression>\bproc\b</expression>
			</zone>
			
			<zone name="tcl.keyword.command.builtinfunc">
				<expression>\b(after|error|lappend|platform|tcl_findLibrary|append|eval|lassign|platform::shell|tcl_startOfNextWord|apply|exec|lindex|tcl_startOfPreviousWord|array|exit|linsert|puts|tcl_wordBreakAfter|auto_execok|expr|list|pwd|tcl_wordBreakBefore|auto_import|fblocked|llength|re_syntax|tcltest|auto_load|fconfigure|load|read|tclvars|auto_mkindex|fcopy|lrange|refchan|tell|auto_mkindex_old|file|lrepeat|regexp|time|auto_qualify|lreplace|registry|tm|auto_reset|filename|lreverse|regsub|trace|bgerror|flush|lsearch|unknown|binary|unload|lsort|Safe Base|format|mathfunc|update|cd|gets|mathop|seek|uplevel|chan|glob|memory|clock|msgcat|socket|close|history|namespace|source|vwait|concat|http|open|split|continue|package|string|dde|incr|parray|subst|dict|info|pid|encoding|interp|pkg::create|fileevent|scan|Tcl|eof|join|pkg_mkIndex|tcl_endOfWord|return|unset)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.switches">
				<expression>-\w+\b</expression>
			</zone>
            
        </collection>
        
        <collection name="Numeric">
        
        	<zone name="tcl.constant.numeric.level-specifier">
        		<expression>(?&lt;!\w)#\d+\b</expression>
        	</zone>
        
			<zone name="tcl.constant.numeric.normal">
				<expression>(?&lt;!\w)((-?\d+(\.\d+)?([eE]-?\d+)?|-?\.\d+([eE]-?\d+)?))\b</expression>
			</zone>
			
			<zone name="tcl.constant.numeric.octal">
				<expression>\\\d{1,3}\b</expression>
			</zone>
			
			<zone name="tcl.constant.numeric.hexadecimal">
				<expression>\\0?x[a-fA-F\d]{1,2}\b</expression>
			</zone>
			
			<zone name="tcl.constant.numeric.unicode">
				<expression>\\u[a-fA-F\d]{1,4}\b</expression>
			</zone>
			
        </collection>
        
        <collection name="General">
        	
        	<zone name="tcl.language.word"> 
        		<expression>[a-zA-Z0-9_]+</expression>
        	</zone>
        	     	
           	<zone name="tcl.language.space"> 
				<expression>\s+</expression>
        	</zone>
        	
        </collection>
        
        <collection name="EscapeChar">
        	<zone name="tcl.escape.character">
        	    <expression>\\[abfnrtv\W'"\!$%&amp;]|\\\d{1,3}</expression>
        	</zone>
        </collection>
        
        
        
        <collection name="AmiraExtension"><!--can be deleted when not needed, but the author needs it desperately :)-->
        
        	<zone name="tcl.amira.sciptobject.shebang">
        	    <expression>^# (Amira-Script-Object V3\.0|Amira Script)</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.amira.global.variables">
        		<expression>(AMIRA_ROOT|AMIRA_LOCAL|SCRIPTFILE|SCRIPTDIR|hideNewModules)\b</expression>
        	</zone> 	
        
        	<zone name="tcl.keyword.option.amira.workArea">
        		<expression>(?&lt;=workArea\s)(setProgressInfo|setProgressValue|startWorking|stopWorking|wasInterrupted)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.option.amira.theMain">
        		<expression>(?&lt;=theMain\s)(snapshot|setViewerTogglesOnIcons|ignoreShow)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.option.amira.theMsg">
        		<expression>(?&lt;=theMsg\s)(error|warning|question|overwrite)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.option.amira.app">
        		<expression>(?&lt;=app\s)(version|uname|arch|hostid|listen|close|port|send|opengl|cluster)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.option.amira.window">
        		<expression>(?&lt;=theMain\s|theMsg\s|viewer\s|viewer\s0\s)(getFrameGeometry|getGeometry|getPosition|getRelativeGeometry|getSize|hide|setCaption|setFrameGeometry|setGeometry|setPosition|setRelativeGeometry|setSize|show|showMinimized|showMaximized)\b</expression>
        	</zone>
        	
        
        	<zone name="tcl.keyword.command.amira.this">
        	    <expression>(\$this)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.global.commands.window">
        	    <expression>\b(theMain|theMsg)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.global.commands.viewer">
        	    <expression>\b(viewer(\s\d*)?)</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.global.commands.other">
        	    <expression>\b(workArea|app)\b</expression>
        	</zone>
        	
            <!--snapshot could interfere with "theMain snapshot", so tcl.keyword.options.amira.viewer is here the lower syntax zone and should not be changed-->
            <zone name="tcl.keyword.option.amira.viewer">
            	<expression>\b(snapshot|setPosition|getPosition|setSize|getSize|setCamera|getCamera|setCameraPosition|getCameraPosition|setCameraOrientation|getCameraOrientation|setCameraFocalDistance|getCameraFocalDistance|setCameraHeightAngle|getCameraHeightAngle|setCameraHeight|getCameraHeight|setCameraType|getCameraType|setTransparencyType|getTransparencyType|setSortedLayersNumPasses|getSortedLayersNumPasses|setBackgroundColor|getBackgroundColor|setBackgroundColor2|getBackgroundColor2|setBackgroundMode|getBackgroundMode|setBackgroundImage|getBackgroundImage|setAutoRedraw|isAutoRedraw|transformScreenToWorld|redraw|rotate|setDecoration|saveScene|viewAll|view|show|hide|fogRange|setVideoFormat|setVideoFrame)\b</expression>
            	<capture number="2" name="tcl.keyword.option.amira.viewer.argument"/>
            </zone>
        	        	        	
        	<zone name="tcl.keyword.command.amira.port.scriptobject">
        	    <expression>\b(newPortButtonList|newPortButtonMenu|newPortColormap|newPortDoIt|newPortFilename|newPortFloatSlider|newPortFloatTextN|newPortMultiMenu|newPortInfo|newPortIntSlider|newPortIntTextN|newPortRadioBox|newPortSeparator|newPortText|newPortTime|newPortToggleList|newPortConnection|deletePort|setVar|setVarSerialize|getVar|testBreak)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.interface-component-port">
        	    <expression>\b(getValue|setValue|help|isNew|getState|setState|getLabel|setLabel|getLabelWidth|setLabelWidth|align|getPin|setPin|touch|untouch|object|send|show|hide|isVisible|reposition|isOfType|getTypeId|connect)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.interface-component-connectionport">
        	    <expression>\b(source|connect|disconnect|setTightness|isTight|setVisibility|isVisible|allowEditing|isEditable|validSource)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.general-amira-object">
        	    <expression>\b(hasInterface|duplicate|showIcon|hideIcon|iconVisible|select|deselect|setLabel|fire|compute|allPorts|connectionPorts|downStreamConnections|setIconPosition|getIconPosition|clipGeom|unclipGeom|setPickable|destroy|getTypeId|help|getLabel|setViewerMask)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.amira-spatial-data-object">
        	    <expression>\b(getBoundingBox|getTransform|setTransform|getInverseTransform|getTranslation|setTranslation|getRotation|setRotation|getScaleFactor|setScaleFactor|translate|rotate|scale|multTransform|hasUndefinedValue|getUndefinedValue|setUndefinedValue|hasDataWindow|setDataWindow|removeDataWindow|getRange|touchMinMax)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.global.other">
        	    <expression>\b(addTimeout|all|aminfo|clear|create|dso|addPath|echo|help|httpd|limit|load|mem|quit|remove|rename|sleep|source|system|saveNetwork|saveNetworkAs)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.data-classes">
        	    <expression>\b(HxData|HxSpreadSheet|HxColormap|HxColormap256|HxCameraPath|HxKeyframeCameraPath|HxSpatialData|HxIvData|HxField3|HxScalarField3|HxRegScalarField3|HxUniformScalarField3|HxUniformLabelField3|HxStackedScalarField3|HxStackedLabelField3|HxAnnaScalarField3|HxTetraScalarField3|HxHexaScalarField3|HxVectorField3|HxRegVectorField3|HxUniformVectorField3|HxEdgeElemVectorField3|HxAnnaVectorField3|HxTetraVectorField3|HxHexaVectorField3|HxComplexScalarField3|HxRegComplexScalarField3|HxUniformComplexScalarField3|HxTetraComplexScalarField3|HxHexaComplexScalarField3|HxComplexVectorField3|HxRegComplexVectorField3|HxUniformComplexVectorField3|HxEdgeElemComplexVectorField3|HxTetraComplexVectorField3|HxHexaComplexVectorField3|HxColorField3|HxRegColorField3|HxUniformColorField3|HxRegField3|HxTetraField3|HxHexaField3|HxVertexSet|HxSurface|HxTetraGrid|HxHexaGrid|HxLineSet|HxLandmarkSet|HxCluster|HxSurfaceField|HxSurfaceScalarField|HxSurfaceVectorField|HxSurfaceComplexScalarField|HxSurfaceComplexVectorField)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.additional-data-classes">
        	    <expression>\b(HxGenerateTensorData|HxArithmetic|HxBSpline|HxColormapSC|HxConvertToDiskData|HxGPUShader|HxLinearVectorField3|HxMagDipol|HxMosaic|HxMovieData|HxSpatialGraph|HxSurfacePathSet|HxTime|HxScriptObject|HxIvDisplay|HxAnnotation|HxSound|HxSQLite|HxTridelity|Hx2DMesh|HxCreateSphere|HxFakeModule|HxDynamicFileSeriesCtrl|HxGeometryToSurface|HxLDAExpertSettings|HxMolTrajectoryBundle|HxPSFGen|HxParametricSurface|HxStereoTestPattern|HxVoxelSurface|HxCalculus|HxCircularCameraPath|HxArbitraryCut|HxMultiChannelField3|HxMultiChannelField|HxScale)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.amira.port.type">
        	    <expression>\b(HxPortButtonList|HxPortButtonMenu|HxPortColorList|HxPortFloatslider|HxPortFloatTextN|HxPortGeneric|HxPortIntSlider|HxPortMultiMenu|HxPortMultiOptions|HxPortRadioBox|HxPortRangeSlider|HxPortTabBar|HxPortText|HxPortTextEdit|HxPortToggleList|HxPort3DPointList)\b</expression>
        	</zone>
        	
        </collection>
        
	</library>
    
</syntax>