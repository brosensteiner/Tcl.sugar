<?xml version="1.0" encoding="UTF-8"?>
<!--
@description Defines the Tcl syntax
@author 	 Bernhard Rosensteiner <brosensteiner@gmail.com>
@copyright 	 The MIT License

Copyright (c) 2012 Bernhard Rosensteiner

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<syntax name="language-root.tcl">

    <zones>
		<include collection="Invalid" />
		<zone name="tcl.comment.shebang">
			<expression>^(#!).*?\b(tclsh|wish)\b.*?$[\n\r]*|^(#!).*?\benv\s+?tclsh.*?$[\n\r]*</expression>
			<capture number="1" name="punctuation.definition.begin"/>
		</zone>
		<include collection="Numeric" />
		<include collection="Variables" />
		<include collection="Math" />
		<include collection="tclLanguage" />
		<include collection="FormatSpecifier"/>
		<include collection="Operators" />
		<include syntax="language-root.amira" /><!--can be deleted if Amira syntax extension is not needed-->
		<include collection="Comments" />
		<include collection="Strings"/>
		<include collection="FlowControl" />
		<include collection="General" />
		<include collection="BracesBracketsParenthesis" />
	</zones>
    
	<library>
	
		<collection name="BracesBracketsParenthesis">
			
			<zone name="tcl.container.balanced-parenthesis">
			    <starts-with>
			        <expression>\(</expression>
			        <capture number="0" name="tcl.keyword.punctuation.open-parenthesis"/>
			    </starts-with>
			    <ends-with>
			        <expression>\)</expression>
			        <capture number="0" name="tcl.keyword.punctuation.close-parenthesis"/>
			    </ends-with>
			    <subzones>
			    	<zone name="tcl.keyword-control-additional"><!--only really valid in parenthesis when before is a "expr" command-->
			    		<expression>([?]|[:])</expression>
			    	</zone>
			    	<include syntax="language-root.tcl" />
			    </subzones>
			</zone>
						
			<zone name="tcl.container.balanced-brackets">
			    <starts-with>
			        <expression>\[</expression>
			        <capture number="0" name="tcl.punctuation.open-bracket"/>
			    </starts-with>
			    <ends-with>
			        <expression>\]</expression>
			        <capture number="0" name="tcl.punctuation.close-bracket"/>
			    </ends-with>
			    <subzones>
			    	<include syntax="language-root.tcl" />
			    </subzones>
			</zone>
			
			<zone name="tcl.container.balanced-braces">
			    <starts-with>
			        <expression>\{</expression>
			        <capture number="0" name="tcl.punctuation.open-brace"/>
			    </starts-with>
			    <ends-with>
			        <expression>\}</expression>
			        <capture number="0" name="tcl.punctuation.close-brace"/>
			    </ends-with>
			    <subzones>
			    	<include collection="Balanced" />
			    	<include syntax="language-root.tcl" />
			    </subzones>
			    <cut-off>
			        <expression></expression>
			    </cut-off>
			</zone>
				
		</collection>
			
		<!--some invalid syntax (will eventually be more over time)-->
		<collection name="Invalid">
			<zone name="tcl.language.invalid.comment-semicolon">
			    <expression>;\s+?#[^\d].*?$[\n\r]*</expression>
			</zone>
		</collection>
		
		<collection name="Markup">
		
			<zone name="markup.link"><!--stolen from php sugar - really crazy regex :)-->
				<expression>(?i)\b(?:[a-z][\w-]+:(?:/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()&lt;>]+|\(([^\s()&lt;>]+|(\([^\s()&lt;>]+\)))*\))+(?:\(([^\s()&lt;>]+|(\([^\s()&lt;>]+\)))*\)|[^\s`!()\[\]{};:'".,&lt;>?«»“”‘’])</expression>
			</zone>
			
		</collection>
	
		<collection name="Comments">
			<!--this multiline comment is actually a convinient way to write comments in tcl because this approach doesn´t fill Espresso´s Navigator with every comment line:-->
			<zone name="tcl.comment.multiline"><!--can not catch markup in first line - this is the problem of the tcl comment syntax because there are no real multiline comments... -->
			    <starts-with>
			        <expression>(#)[^\d]?.*?(?&lt;!\\)\\\s*$[\n\r]?</expression>
			        <capture number="1" name="tcl.punctuation.comment.hash"/>
			    </starts-with>
			    <ends-with>
			        <expression>[^\\]\s*$[\n\r]+</expression>
			    </ends-with>
			    <subzones>
			    	<include collection="Markup"/>
			    </subzones>
			</zone>
			
			<zone name="tcl.comment.line">
				<starts-with>
			    	<expression>(#)[^\d]?</expression>
			    	<capture number="1" name="tcl.punctuation.comment.hash"/>
			    </starts-with>
			    <ends-with>
			        <expression>$[\n\r]*</expression>
			    </ends-with>
			    <subzones>
			    	<include collection="Markup"/>
			    </subzones>
			</zone>
			
			<zone name="tcl.comment.multiline"><!--awkward tcl multiline comment :)-->
			    <starts-with>
			        <expression>if\s+0\s+\{</expression>
			    </starts-with>
			    <ends-with>
			        <expression>\}</expression>
			    </ends-with>
			</zone>
		
		</collection>

		<collection name="Variables"><!--i want that all variable things get special highlight, so here are some definition-->
		
			<zone name="tcl.keyword.command.definition.command.upvar">
			    <expression>upvar</expression>
			</zone>
			<zone name="tcl.keyword.command.definition.command-global">
			    <expression>\bglobal\b</expression>
			</zone>
			<zone name="tcl.keyword.command.definition.command-variable">
			    <expression>\bvariable\b</expression>
			</zone>
						
			<zone name="tcl.keyword.set-variable.substitute">
			    <starts-with>
			        <expression>([[:alnum:]_?!:\.]*)(\$\{)</expression>
			        <capture number="1" name="tcl.keyword.set-variable.substitute.rest"/>
			        <capture number="2" name="tcl.keyword.set-variable.substitute.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>(\})([[:alnum:]_?!:\.]*)</expression>
			        <capture number="1" name="tcl.keyword.set-variable.substitute.end"/>
			        <capture number="2" name="tcl.keyword.set-variable.substitute.rest"/>
			    </ends-with>
			    <subzones>
			    	<include collection="EscapeChar"/>
			    </subzones>
			</zone>
			
			<zone name="tcl.keyword.set-variable.substitute.array">
			    <starts-with>
			        <expression>([[:alnum:]_?!:\.]*)(\$\()</expression>
			        <capture number="1" name="tcl.keyword.set-variable.substitute.rest"/>
			        <capture number="2" name="tcl.keyword.set-variable.substitute.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>(\))([[:alnum:]_?!:\.]*)</expression>
			        <capture number="1" name="tcl.keyword.set-variable.substitute.end"/>
			        <capture number="2" name="tcl.keyword.set-variable.substitute.rest"/>
			    </ends-with>
			    <subzones>
			    	<include collection="EscapeChar"/>
			    </subzones>
			</zone>
						
			<zone name="tcl.variable.definition.evaluate">
			    <expression>(\$)[[:alnum:]_?!:\.]+\b</expression>
			    <capture number="1" name="tcl.variable.definition.evaluate.punctuation"/>
			</zone>
			
		</collection>
		
		<collection name="FlowControl">
		
			<zone name="tcl.keyword.control.start">
				<expression>\b(for|while|if|foreach|switch)\b</expression>
			</zone>
		
			<zone name="tcl.keyword.control.additional">
				<expression>\b(elseif|else|then)\b</expression>
			</zone>
					
			<zone name="tcl.keyword.control.flow">
				<expression>\b(break|continue|[?&lt;!:]:[?!:])\b</expression>
			</zone>
		
		</collection>
		
		<collection name="Strings"><!--yeah, i know this is not a Tcl String def - because ESIAS ;)-->
			
			<zone name="tcl.string.quoted.double">
			    <starts-with>
			        <expression>(?&lt;=\s|\{|\[)"</expression>
			        <capture number="0" name="tcl.punctuation.doublequote.string.quoted.begin"/>
			    </starts-with>
			    <ends-with>
			        <expression>"</expression>
			        <capture number="0" name="tcl.punctuation.doublequote.string.quoted.end"/>
			    </ends-with>
			    <subzones>
			    	<include collection="EscapeChar"/>
			       	<include collection="FormatSpecifier"/>
			    	<include collection="AmiraExtension" />
			    	<include collection="BracesBracketsParenthesis" />
			    	<include collection="Variables" />
			    	<include collection="General" />
			    </subzones>
			</zone>
		
		</collection>
        
        <collection name="Operators">
               
           	<zone name="tcl.keyword.operator.relational">
        	    <expression>(=|!)=|&lt;=?|>=?</expression>
        	</zone>
        	        	
        	<zone name="tcl.keyword.operator.logical">
        	    <expression>\|\||&amp;&amp;|!</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.operator.bitwise">
        	    <expression>&gt;&gt;|&lt;&lt;|\||\^|&amp;|~</expression>
        	</zone>
        	        	
        	<zone name="tcl.keyword.operator.arithmetic">
        	    <expression>\+|-|\*\*?|\/|%</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.operator.comp-string">
        	    <expression>\b(ne|eq)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.operator.list">
        	    <expression>\b(in|ni)\b</expression>
        	</zone>
        	
        </collection>
        
        <collection name="FormatSpecifier">
        	<zone name="tcl.keyword.format-specifier.string-format">
        		<expression>%(-|\+|#|0|[[:space:]])?(\d+)?(\.\d+)?([cdEefgGiouxXqs])</expression>
        		<capture number="1" name="tcl.keyword.additional.format-flags"/>
        		<capture number="2" name="tcl.keyword.additional.format-width"/>
        		<capture number="3" name="tcl.keyword.additional.format-precision"/>
        		<capture number="4" name="tcl.keyword.additional.format-type"/>
        	</zone>
        </collection>
        
        <collection name="tclLanguage">
                
        	<zone name="tcl.punctuation.terminator.semicolon">
        		<expression>;</expression>
        	</zone>
        	
        	<zone name="tcl.punctuation.go-on.backslash">
        		<expression>\\\s*?[\n\r]</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.namespace.character-class">
        		<expression>::</expression>
           	</zone>
        	<zone name="tcl.keyword.namespace.characters">
        		<expression>(?:[[:alnum:]_?!\.]+(::))|((?&lt;=::)[[:alnum:]_?!:\.]+)</expression>
        		<capture number="1" name="tcl.punctuation.namespace"/>
        	</zone>
        	
        	<!--for controlled regex syntax highlighting:-->
        	<zone name="tcl.container.regex.function-call-regexp">
        	    <starts-with>
        	        <expression>\b(regexp)\s+((?:-\w+\s+)+)?(\{)</expression>
        	        <capture number="1" name="tcl.keyword.command.function-call"/>
        	        <capture number="2" name="tcl.keyword.property-name"/>
        	        <capture number="3" name="tcl.punctuation.open-brace"/>
        	    </starts-with>
        	    <ends-with>
        	        <expression>(\})</expression>
        	        <capture number="1" name="tcl.punctuation.close-brace"/>
        	    </ends-with>
        	</zone>
        	<zone name="tcl.container.regex.function-call-regsub">
        	    <starts-with>
        	        <expression>\b(regsub)\s+((?:-\w+\s+)+)?(\{)</expression>
        	        <capture number="1" name="tcl.keyword.command.function-call"/>
        	        <capture number="2" name="tcl.keyword.property-name"/>
        	        <capture number="3" name="tcl.punctuation.open-brace"/>
        	    </starts-with>
        	    <ends-with>
        	        <expression>(\})</expression>
        	        <capture number="1" name="tcl.punctuation.close-brace"/>
        	    </ends-with>
        	</zone>
        	
        	<zone name="tcl.container.function-call-catch"><!--catch assigns a variable we will catch so here is a zone definition for it-->
        	    <starts-with>
        	        <expression>\b(catch)\s+(\{)</expression>
        	        <capture number="1" name="tcl.keyword.command.function-call"/>
        	        <capture number="2" name="tcl.punctuation.open-brace"/>
        	    </starts-with>
        	    <ends-with>
        	        <expression>(\})</expression>
        	        <capture number="1" name="tcl.punctuation.close-brace"/>
        	    </ends-with>
        	    <subzones>
        	    	<include syntax="language-root.tcl" />
        	    </subzones>
        	</zone>
        	
        	<zone name="tcl.keyword.command.function">
        		    <expression>\bproc\s+(\w+)</expression>
        		    <capture number="1" name="tcl.keyword.command.function.name"/>
        	</zone>
        	
        	<zone name="tcl.keyword.command.class">
        		    <expression>\bclass\s+(\w+)</expression>
        		    <capture number="1" name="tcl.keyword.command.class.name"/>
        	</zone>
        	
        	<zone name="tcl.keyword.command.function-call">
        		<expression>\b(rename|prefix|catch|regexp|regsub|after|error|lappend|platform|tcl_findLibrary|append|eval|lassign|platform::shell|tcl_startOfNextWord|apply|exec|lindex|tcl_startOfPreviousWord|array|exit|linsert|puts|tcl_wordBreakAfter|auto_execok|expr|list|pwd|tcl_wordBreakBefore|auto_import|fblocked|llength|re_syntax|tcltest|auto_load|fconfigure|load|read|tclvars|auto_mkindex|fcopy|lrange|refchan|tell|auto_mkindex_old|file|lrepeat|time|auto_qualify|lreplace|registry|tm|auto_reset|filename|lreverse|trace|bgerror|flush|lsearch|unknown|binary|unload|lsort|Safe Base|format|mathfunc|update|cd|gets|mathop|seek|uplevel|chan|glob|memory|clock|msgcat|socket|close|history|namespace|source|vwait|concat|http|open|split|package|string|dde|incr|parray|subst|dict|info|pid|encoding|interp|pkg::create|fileevent|scan|Tcl|eof|join|pkg_mkIndex|tcl_endOfWord|return|unset|set|lset|args)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.command.global-procedures">
        		<expression>\b(auto_execs|auto_index|auto_noexec|auto_noload|auto_path|unknown_pending)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.variable.global-variables">
        		<expression>\b(env|errorCode|errorInfo|tcl_library|tcl_patchLevel|tcl_pkgPath|tcl_platform|tcl_precision|tcl_rcFileName|tcl_rcRsrcName|tcl_traceCompile|tcl_traceExec|tcl_wordchars|tcl_nonwordchars|tcl_version|argc|argv|argv0|tcl_interactive|geometry|TCL_OK|TCL_ERROR|TCL_RETURN|TCL_BREAK|TCL_CONTINUE|resultVarName|-errorinfo|-errorcode|-errorline|-errorstack|-code|-level)\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.property-name"><!--catches all switches in tcl (e.g. "-switch")-->
        		<expression>(?&lt;![[:alnum:]_?!:\.])-[[:alnum:]_?!:\.]+\b</expression>
        	</zone>
        	
        	<zone name="tcl.keyword.options.package">
        		<expression>\b(forget|ifneeded|names|present|provide|require|unknown|vcompare|versions|package|prefer|vsatisfies)\b</expression>
        	</zone>
        	<zone name="tcl.keyword.options.package.prefer">
        		<expression>\b(latest|stable|unstable)\b</expression>
        	</zone>
			
			<zone name="tcl.keyword.options.file">
				<expression>\b(attributes|copy|atime|copy|delete|channels|dirname|executable|exists|extension|isdirectory|isfile|join|link|lstat|mkdir|mtime|owned|pathtype|nativename|readlink|normalize|rename|rootname|size|separator|split|stat|system|tempfile|volumes|tail|type|writable|readable)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.array">
				<expression>\b(anymore|donesearch|exists|get|names|nextelement|set|size|startsearch|statistics|unset)\b</expression>
			</zone>
			<!--here more specificity is needed because "for" is also the keyword for the for loop and there is no way to discriminate both-->
			<zone name="tcl.keyword.options.dict">
				<expression>(?&lt;=dict\s)(append|create|exists|filter|for|get|incr|info|keys|lappend|merge|remove|replace|set|size|unset|update|values|with)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.dict.filter">
				<expression>\b(key|script|value)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.after">
				<expression>\b(cancel|idle|info)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.binary">
				<expression>\b(scan|format|encode|decode)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.binary.encode-decode">
				<expression>\b(base64|hex|uuencode)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.clock">
				<expression>\b(clicks|format|scan|seconds)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.dde">
				<expression>\b(eval|execute|poke|request|servername|services)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.encoding">
				<expression>\b(convertfrom|convertto|names|system)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.fileevent">
				<expression>\b(readable|writable)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.history">
				<expression>\b(add|change|clear|event|info|keep|nextid|redo)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.namespace">
				<expression>\b(children|code|current|delete|ensemble|eval|exists|export|forget|import|inscope|origin|parent|path|qualifiers|tail|upvar|unknown|which)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.trace">
				<expression>\b(add|remove|info|variable|vdelete|vinfo)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.trace.add-remove-info">
				<expression>\b(command|execution|variable)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.trace.add-command">
				<expression>\b(rename|delete)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.trace.add-execution">
				<expression>\b(enter|leave|enterstep|leavestep)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.trace.add-variable">
				<expression>\b(array|read|write|unset)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.string-options">
				<expression>\b(bytelength|compare|equal|first|index|is|last|length|map|match|range|repeat|replace|reverse|tolower|totitle|toupper|trim|trimleft|trimright|wordend|wordstart)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.char-class.string-is">
				<expression>\b(alnum|alpha|ascii|boolean|control|digit|double|false|graph|integer|list|lower|print|punct|space|true|upper|wideinteger|wordchar|xdigit)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.info">
				<expression>\b(args|body|cmdcount|commands|complete|default|exists|frame|functions|globals|hostname|level|library|loaded|locals|nameofexecutable|patchlevel|procs|script|sharedlibextension|tclversion|vars)\b</expression>
			</zone>
			
			<zone name="tcl.keyword.options.info.frame">
				<expression>\b(type|line|file|cmd|proc|lambda|level)\b</expression>
			</zone>
			<zone name="tcl.keyword.options.info.frame.type">
				<expression>\b(source|proc|eval|precompiled)\b</expression>
			</zone>
			            
        </collection>
        
        <collection name="Math">
        	<zone name="tcl.keyword.command.math">
        		<expression>(-?)(abs|acos|asin|atan|atan2|bool|ceil|cos|cosh|double|entier|exp|floor|fmod|hypot|int|isqrt|log|log10|max|min|pow|rand|round|sin|sinh|sqrt|srand|tan|tanh|wide)\b</expression>
        		<capture number="1" name="tcl.keyword.operator.arithmetic"/>
        	</zone>
        </collection>
        
        <collection name="Numeric">
        
        	<zone name="tcl.constant.language.end">
        		<expression>\bend\b</expression>
        	</zone>
        
        	<zone name="tcl.constant.numeric.level-specifier">
        		<expression>(?&lt;!\w)#\d+\b</expression>
        	</zone>
        	
        	<zone>
        		<expression>(?&lt;!\w)(\d+\.)\s</expression>
        		<capture number="1" name="tcl.constant.numeric.point"/>
        	</zone>
        	
   			<zone name="tcl.constant.numeric.normal">
				<expression>(?&lt;!\w)((-?\d+(\.\d+)?([eE]-?\d+)?|-?\.\d+([eE]-?\d+)?))\b</expression>
			</zone>
			
			<zone name="tcl.constant.numeric.octal">
				<expression>\\\d{1,3}\b</expression>
			</zone>
			
			<zone name="tcl.constant.numeric.hexadecimal">
				<expression>\\0?x\h{1,2}\b</expression>
			</zone>
			
			<zone name="tcl.constant.numeric.unicode">
				<expression>\\u\h{1,4}\b</expression>
			</zone>
			
        </collection>
        
        <collection name="General">
        	
        	<zone name="tcl.language.word"> 
        		<expression>[[:alnum:]_?!:\.]+|,</expression>
        	</zone>
        	
        </collection>
        
        <collection name="EscapeChar">
        	<zone name="tcl.escape.character">
        	    <expression>\\[abfnrtv\W'"\!$%&amp;]|\\\d{1,3}</expression>
        	</zone>
        </collection>
        
	</library>
    
</syntax>