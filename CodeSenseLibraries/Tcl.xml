<?xml version="1.0" encoding="UTF-8"?>
<!--
@description Defines the Tcl code sense libraries
@author 	 Bernhard Rosensteiner <brosensteiner@gmail.com>
@copyright 	 The MIT License

Copyright (c) 2012 Bernhard Rosensteiner

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<codesense version="1.0">

	<set name="com.rosensteiner.Tcl.functions" casesensitive="true">
	
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    
	    <completion string="tclsh">
	    	<behavior>
	    		<append-dynamic>
	    		<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    		<transform-into>(?1:$1: ${1:?-encoding name?} ${2:?fileName arg arg ...?}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="try">
	    	<behavior>
	    		<append-dynamic>
	    		<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    		<transform-into>(?1:$1: ${1:body} ${2:?handler...?} ${3:?finally script?}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="prefix">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="after">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:ms}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="string">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="clock">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="error">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:message} ${2:?info?} ${3:?code?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lappend">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:varName} ${2:?value value value ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="zlib">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:subcommand} ${2: arg ...}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="platform" />
		<completion string="append">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:varName} ${2:?value value value ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="eval">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:arg} ${2:?arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lassign">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:?varName ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="platform::shell" />
		<completion string="apply">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:func} ${2:?arg1 arg2 ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lmap">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:varlist1} ${2:list1} ${3:?varlist2 list2 ...?} ${4:body}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="exec">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?switches?} ${2:arg} ${3:?arg ...?} ${4:?&amp;?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lindex">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:?index ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="proc">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:name} ${2:args} ${3:body}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="array">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="exit">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?returnCode?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="linsert">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:index} ${3:?element element ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="puts">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:-nonewline} ${2:?channelId?} ${3:string}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="expr">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:arg} ${2:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="list">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="pwd" />
		<completion string="fblocked">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="llength">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:list}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<!--<completion string="re_syntax" />-->
		<completion string="tcltest" />
		<completion string="fconfigure">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:?name?} ${3:?value?} ${4:?name value ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="load">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?-global?} ${2:?-lazy?} ${3:fileName} ${4:packageName} ${5:interp}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="read">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:-nonewline} ${2:?channelId?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="tclvars" />
		<completion string="fcopy">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:inchan} ${2:outchan} ${3:?-size size?} ${4:?-command callback?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lrange">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:first} ${3:last}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="refchan">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="initialize"><!--sub command refchan-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:mode}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="finalize"><!--sub command refchan and zlib-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="watch"><!--sub command refchan-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:eventspec}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="write"><!--sub command refchan-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:data}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="configure"><!--sub command refchan-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:option} ${3:value}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="cget"><!--sub command refchan-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:option}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="cgetall"><!--sub command refchan-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="blocking"><!--sub command refchan-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:mode}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="transchan">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="clear"><!--sub command transchan-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="drain"><!--sub command transchan-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:handle}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="limit?"><!--sub command transchan-->
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:handle}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="tell">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="auto_mkindex_old" />
		<completion string="file">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:name} ${3:?option value option value...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lrepeat">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:count} ${2:?element?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="regexp">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?switches?} ${2:exp} ${3:string} ${4:?matchVar?} ${5:?subMatchVar subMatchVar ...?} $0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="time" />
		<completion string="fileevent">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:readable|writable} ${3:?script?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lreplace">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:first} ${3:last} ${4:?element element ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="registry" />
		<completion string="tm" />
		<completion string="filename" />
		<completion string="lreverse">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:list}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="regsub">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?switches?} ${2:exp} ${3:string} ${4:subSpec} ${5:?varName?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="trace">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="bgerror">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:message}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="flush">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="lsearch">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?options?} ${2:list} ${3:pattern}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="rename">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?oldName?} ${2:newName}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="unknown" />
		<completion string="binary">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="for" />
		<completion string="lset">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?varName?} ${2:?index ...?} ${3:newValue}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="return" />
		<completion string="unload">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?switches?} ${2:fileName} ${3:packageName} ${4:interp}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="break" />
		<completion string="lsort">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?options?} ${2:list}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="Safe Base" />
		<completion string="unset">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?-nocomplain?} ${2:?name name name ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="catch">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:script} ${2:?resultVarName?} ${3:?optionsVarName?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="throw" />
		<completion string="coroutine">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:name} ${2:command} ${3:?arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="yield">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?value?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="yieldto">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:command} ${2:?arg ...?} ${3:name} ${4:?value?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="tailcall">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:command} ${2:?arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="format">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:formatString} ${2:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="mathfunc" />
		<completion string="scan">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:string} ${2:format} ${3:?varName varName ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="update">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:idletasks}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="cd">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?dirname?}$0)</transform-into>
					</append-dynamic>
			</behavior>
		</completion>
		<completion string="gets">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:?varName?}$0)</transform-into>
					</append-dynamic>
			</behavior>
		</completion>
		<completion string="mathop" />
		<completion string="seek">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:offset} ${3:?origin?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="uplevel" />
		<completion string="chan">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:?arg arg ...?}$0)</transform-into>
					</append-dynamic>
				</behavior>
		</completion>
		<completion string="glob">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?switches?} ${2:?pattern ...?}$0)</transform-into>
					</append-dynamic>
			</behavior>
		</completion>
		<completion string="memory">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="set">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:varName} ${2:?value?}$0)</transform-into>
					</append-dynamic>
			</behavior>
		</completion>
		<completion string="upvar">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?level?} ${2:otherVar} ${3:myVar} ${4:?otherVar myVar ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="global">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?varname ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="msgcat" />
		<completion string="socket">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?options?} ${2:host} ${3:port}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="variable">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?name value...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="close">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:?r\(ead\)\|w\(rite\)?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="history">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="namespace">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="source">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?-encoding?} ${2:encodingName fileName}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="vwait">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:varName}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="concat">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="http">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="open">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:fileName} ${2:?access?} ${3:?permissions?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="split">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:string} ${2:?splitChars?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="continue" />
		<completion string="foreach" />
		<completion string="while" />
		<completion string="if" />
		<completion string="else" />
		<completion string="elseif" />
		<completion string="then" />
		<completion string="package">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="dde" />
		<completion string="incr">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?varName?} ${2:?increment?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="subst">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:?options?} ${2:string}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="dict">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="info">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="pid" />
		<completion string="switch" />
		<completion string="encoding">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="interp">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="pkg::create" />
		<completion string="pkg_mkIndex" />
		<completion string="eof">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="join">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:?joinString?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		
		<!--STREAMING INSTANCE COMMANDS:-->
	    <completion string="add">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?option?} ${2:data}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="checksum">
	        <behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="fullflush">
	        <behavior>
				<append-static></append-static>
			</behavior>
	    </completion>
	    <completion string="get">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?count?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="put">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?option?} ${2:data}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="reset">
	        <behavior>
				<append-static></append-static>
			</behavior>
	    </completion>
	    
	</set>
	
	<set name="com.rosensteiner.Tcl.functions-with-option">
		<!--memory-->
		<completion string="memory active">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:file}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="memory break_on_malloc">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:count}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="memory info"/>
		<completion string="memory init">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:on|off}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="memory objs">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:file}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="memory onexit">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:file}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="memory tag">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:string}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="memory trace">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:on|off} $0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="memory trace_on_at_malloc">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:count}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="memory validate">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:on|off}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<!--interp-->
		<completion string="interp alias">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:srcPath} ${2:srcCmd} ${3:targetPath} ${4:targetCmd} ${5:?arg arg ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp aliases">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?path?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp bgerror">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path} ${2:?cmdPrefix?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp cancel">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?-unwind?} ${2:?path?} ${3:?result?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp create">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?-safe?} ${2:?path?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp debug">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path} ${2:${3:?-frame} ${4:?bool?}}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp delete">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?path ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp eval">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path} ${2:arg} ${3:?arg ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp exists">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp expose">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path} ${2:hiddenName} ${3:?exposedCmdName?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp hide">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path} ${2:exposedCmdName} ${3:?hiddenCmdName?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp hidden">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp invokehidden">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path} ${2:?-option ...?} ${3:hiddenCmdName} ${4:?arg ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp issafe">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?path?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp limit">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path} ${2:limitType} ${3:?-option?} ${4:?value ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp marktrusted">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp recursionlimit">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path} ${2:?newlimit?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp share">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:srcPath} ${2:channelId} ${3:destPath}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp slaves">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?path?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp target">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:path} ${2:alias}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="interp transfer">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:srcPath} ${2:channelId} ${3:destPath}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<!--encoding-->
		<completion string="encoding convertfrom">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?encoding?} ${2:data}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="encoding convertto">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?encoding?} ${2:string}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="encoding dirs">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?directoryList?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="encoding names" />
		<completion string="encoding system">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?encoding?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<!--clock-->
		<completion string="clock add">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:timeVal} ${2:?count unit...?} ${3:?-option value?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="clock clicks">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?-option?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="clock format">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:timeVal} ${2:?-option value?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="clock microseconds"/>
		<completion string="clock milliseconds"/>
		<completion string="clock scan">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
		            <transform-into>(?1:$1: ${1:inputString} ${2:?-option value?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="clock seconds"/>	
		<!--package-->
		<completion string="package forget">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?package package ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="package ifneeded">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:package version} ${2:?script?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="package names">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="package present">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?-exact?} ${2:package} ${3:?requirement...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="package provide">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:package} ${2:?version?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="package require">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:package} ${2:?requirement...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="package unknown">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?command?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="package vcompare">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:version1 version2}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="package versions">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:package}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="package vsatisfies">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:version requirement...}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="package prefer">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?latest|stable?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<!--namespace-->
		<completion string="namespace children">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?namespace?} ${2:?pattern?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace code">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:script}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace current">
			<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
		<completion string="namespace delete">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?namespace namespace ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace ensemble create">
			<behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?option value?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace ensemble configure">
			<behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:command} ${2:?option?} ${3:?value?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace ensemble exists">
			<behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:command}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>		    
		<completion string="namespace eval">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:namespace arg} ${2:?arg ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace exists">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:namespace}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace export">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?-clear?} ${2:?pattern pattern ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace forget">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?pattern pattern ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace import">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?-force?} ${2:?pattern pattern ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace inscope">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:namespace} ${2:script} ${3:?arg ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace origin">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:command}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace parent">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?namespace?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace path">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?namespaceList?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace qualifiers">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:string}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace tail">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:string}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace upvar">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:namespace} ${2:?otherVar myVar ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace unknown">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?script?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="namespace which">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?-command?} ${2:?-variable?} ${3:name}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<!--prefix-->
		<completion string="prefix all">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:table} ${2:string}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="prefix longest">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:table} ${2:string}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="prefix match">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?options?} ${2:table} ${3:string}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<!--after-->
		<completion string="after cancel">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:id}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="after idle">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:script} ${2:?script script ...?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
		<completion string="after info">
		    <behavior>
		        <append-dynamic>
		            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		            <transform-into>(?1:$1: ${1:?id?}$0)</transform-into>
		        </append-dynamic>
		    </behavior>
		</completion>
	    <!--dict-->
	    <completion string="dict append">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:?string ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict create">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?key value ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict exists">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryValue} ${2:key} ${3:?key ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict filter">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryValue} ${2:filterType} ${3:arg ...}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict for">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:\{keyVar valueVar\}} ${2:dictionaryValue} ${3:body}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict get">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryValue} ${2:?key ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict incr">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:?increment?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict info">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryValue}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict keys">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryValue} ${2:?globPattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict lappend">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:?value ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict map">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:\{keyVar valueVar\}} ${2:dictionaryValue} ${3:body}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict merge">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?dictionaryValue ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict remove">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryValue} ${2:?key ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict replace">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryValue} ${2:?key value ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict set">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:?key ...?} ${4:value}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict size">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryValue}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict unset">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1:  ${1:dictionaryVariable} ${2:key} ${3:?key ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict update">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:varName} ${4:?key varName ...?} ${5:body}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict values">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryValue} ${2:?globPattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="dict with">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionaryVariable} ${2:?key ...?} ${3:body}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <!--array-->
	    <completion string="array anymore">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName searchId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="array donesearch">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName searchId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="array exists">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="array get">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName} ${2:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="array names">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName} ${2:?mode?} ${3:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="array nextelement">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName searchId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="array set">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName list}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="array size">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="array startsearch">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="array statistics">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="array unset">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:arrayName} ${2:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <!--http-->
	    <completion string="http config">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?options?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http geturl">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:url} ${2:?options?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http formatQuery">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:key value} ${2:?key value?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http reset">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:token} ${2:?why?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http wait">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:token}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http data">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:token}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http error">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:token}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http status">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:token}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http code">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:token}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http ncode">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:token}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http size">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:token}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http meta">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:token}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http cleanup">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:token}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http register">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:proto port command}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="http unregister">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:proto}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <!--binary-->
	    <completion string="binary scan">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:string} ${2:formatString} ${3:?varName varName ...?}$0)</transform-into>
				</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="binary format">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:formatString} ${2:?arg arg ...?}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="binary encode base64">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:?-option value ...?} ${2:data}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="binary encode hex">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:?-option value ...?} ${2:data}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="binary encode uuencode">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:?-option value ...?} ${2:data}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="binary decode base64">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:?-option value ...?} ${2:data}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="binary decode hex">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:?-option value ...?} ${2:data}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="binary decode uuencode">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:?-option value ...?} ${2:data}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <!--history-->
	    <completion string="history add">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:command} ${2:?exec?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="history change">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:newValue} ${2:?event?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="history clear">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="history event">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?event?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="history info">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?count?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="history keep">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?count?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="history nextid">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="history redo">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?event?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <!--info-->
	    <completion string="info args">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:procname}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info body">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:procname}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info class">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:subcommand} ${2:class} ${3:?arg ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info cmdcount">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="info commands">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info complete">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:command}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info coroutine">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="info default">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:procname} ${2:arg} ${3:varname}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info exists">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:varName}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info errorstack">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?interp?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info frame">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?number?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info functions">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info globals">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info hostname">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="info level">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?number?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info library">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="info loaded">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?interp?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info locals">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info nameofexecutable">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="info object">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:subcommand object} ${2:?arg ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info patchlevel">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="info procs">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info script">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?filename?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="info sharedlibextension">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="info tclversion">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="info vars">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <!--string-->
	    <completion string="string bytelength">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string compare">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-nocase?} ${2:?-length int?} ${3:string1 string2}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string equal">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-nocase?} ${2:?-length int?} ${3:string1 string2}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string first">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:needleString haystackString} ${2:?startIndex?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string index">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string charIndex}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>	        
	    <completion string="string is alnum">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is alpha">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is ascii">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is boolean">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is control">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is digit">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is double">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is false">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is graph">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is integer">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is list">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is lower">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is print">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is punct">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is space">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is true">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is upper">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is wideinteger">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is wordchar">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string is xdigit">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-strict?} ${2:?-failindex varname?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string last">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:needleString haystackString} ${2:?lastIndex?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string length">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string map">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-nocase?} ${2:mapping string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string match">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-nocase?} ${2:pattern} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string range">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string first last}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string repeat">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string count}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string replace">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string first last} ${2:?newstring?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string reverse">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string tolower">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?first?} ${3:?last?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string totitle">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?first?} ${3:?last?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string toupper">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?first?} ${3:?last?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string trim">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?chars?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string trimleft">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?chars?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string trimright">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?chars?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string wordend">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string charIndex}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="string wordstart">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string charIndex}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    
	    <!--file-->
	    <completion string="file atime">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name} ${2:?time?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file attributes">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name} ${2:?option value option value...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file channels">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file copy">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-force?} ${2:?--?} ${3:?source?} ${4:?target?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file delete">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-force?} ${2:?--?} ${3:?pathname?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file dirname">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file executable">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file exists">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file extension">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file isdirectory">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file isfile">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file join">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name} ${2:?name ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file link">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-linktype?} ${2:linkName} ${3:?target?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file lstat">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name varName}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file mkdir">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?dir?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file mtime">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name} ${2:?time?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file nativename">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file normalize">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file owned">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file pathtype">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file readable">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file readlink">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file rename">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-force?} ${2:?--?} ${3:source} ${4:target}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file rootname">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file separator">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?name?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file size">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file split">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file stat">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name varName}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file system">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file tail">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file tempfile">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?nameVar?} ${2:?template?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file type">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="file volumes">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="file writable">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    
	    <!--chan-->
	    <completion string="chan blocked">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan close">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId} ${2:?direction?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan configure">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId} ${2:?optionName?} ${3:?value?} ${4:?optionName value?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan copy">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:inputChan outputChan} ${2:?-size size?} ${3:?-command callback?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan create">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:mode cmdPrefix}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan eof">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan event">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId event} ${2:?script?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan flush">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan gets">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId} ${2:?varName?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan names">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan pending">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:mode channelId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan pipe">
	    	<behavior>
				<append-static></append-static>
			</behavior>
		</completion>
	    <completion string="chan pop">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan postevent">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId eventSpec}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan push">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId cmdPrefix}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan puts">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-nonewline?} ${2:?channelId?} ${3:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan read">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?-nonewline?} ${2:channelId} ${3:?numChars?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan seek">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId} ${2:offset} ${3:?origin?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan tell">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="chan truncate">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelId} ${2:?length?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <!--trace-->
	    <completion string="trace add">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:type name ops ?args?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="trace remove">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:type name opList commandPrefix}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="trace info">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:type name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <!--zlib-->
	    <completion string="zlib compress">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?level?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="zlib decompress">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?bufferSize?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="zlib deflate">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?level?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="zlib gunzip">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?-headerVar varName?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="zlib gzip">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?-level level?} ${3:?-header dict?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="zlib inflate">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?bufferSize?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="zlib push">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:mode} ${2:channel} ${3:?options ...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="zlib stream">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:mode} ${2:?level?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="zlib adler32">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?initValue?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="zlib crc32">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string} ${2:?initValue?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	
	</set>
	
	
	<!--globals-->
	<set name="com.rosensteiner.Tcl.global-variables" casesensitive="true">
	
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="args" />
	    <completion string="env" />
	    <completion string="errorCode" />
	    <completion string="errorInfo" />
	    <completion string="tcl_library" />
	    <completion string="tcl_libPath" />
	    <completion string="tcl_patchLevel" />
	    <completion string="tcl_pkgPath" />
	    <completion string="tcl_platform" />
	    <completion string="tcl_precision" />
	    <completion string="tcl_rcFileName" />
	    <completion string="tcl_rcRsrcName" />
	    <completion string="tcl_traceCompile" />
	    <completion string="tcl_traceExec" />
	    <completion string="tcl_wordchars" />
	    <completion string="tcl_nonwordchars" />
	    <completion string="tcl_version" />
	    <completion string="tcl_prompt1" />
	    <completion string="tcl_prompt2" />
	    <completion string="auto_execs" />
	    <completion string="auto_index" />
	    <completion string="auto_noexec" />
	    <completion string="auto_noload" />
	    <completion string="auto_path" />
	    <completion string="argc" />
	    <completion string="argv" />
	    <completion string="argv0" />
	    <completion string="tcl_interactive" />
	    <completion string="geometry" />
	    <completion string="TCL_OK" />
	    <completion string="TCL_ERROR" />
	    <completion string="TCL_RETURN" />
	    <completion string="TCL_BREAK" />
	    <completion string="TCL_CONTINUE" />
	    
	</set>
	
	<set name="com.rosensteiner.Tcl.global-procedures" casesensitive="true">
	
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="auto_execok">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:cmd}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="auto_import">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:pattern}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="auto_load">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:cmd}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="auto_mkindex">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:dir} ${2:pattern pattern ...}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="auto_reset" />
	    <completion string="auto_qualify">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:command} ${2:namespace}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="tcl_findLibrary">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:basename} ${2:version} ${3:patch} ${4:initScript} ${5:enVarName} ${6:varName}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="parray">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:arrayName}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="tcl_endOfWord">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:str} ${2:start}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="tcl_startOfNextWord">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:str} ${2:start}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="tcl_startOfPreviousWord">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:str} ${2:start}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="tcl_wordBreakAfter">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:str} ${2:start}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="tcl_wordBreakBefore">
	    	<behavior>
	    		<append-dynamic>
	    			<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	    			<transform-into>(?1:$1: ${1:str} ${2:start}$0)</transform-into>
	    		</append-dynamic>
	    	</behavior>
	    </completion>
	    <completion string="tclPkgSetup" /><!--deprecated-->
	    <completion string="tclPkgUnknown" />
	    
	</set>
	
	<!--math-->
	<set name="com.rosensteiner.Tcl.mathfunc" casesensitive="true">
	
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1::\($1\) $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="abs" />
	    <completion string="acos" />
	    <completion string="asin" />
	    <completion string="atan" />
	    <completion string="atan2" />
	    <completion string="bool" />
	    <completion string="ceil" />
	    <completion string="cos" />
	    <completion string="cosh" />
	    <completion string="double" />
	    <completion string="entier" />
	    <completion string="exp" />
	    <completion string="floor" />
	    <completion string="fmod" />
	    <completion string="hypot" />
	    <completion string="int" />
	    <completion string="isqrt" />
	    <completion string="log" />
	    <completion string="log10" />
	    <completion string="max" />
	    <completion string="min" />
	    <completion string="pow" />
	    <completion string="rand" />
	    <completion string="round" />
	    <completion string="sin" />
	    <completion string="sinh" />
	    <completion string="sqrt" />
	    <completion string="srand" />
	    <completion string="tan" />
	    <completion string="tanh" />
	    <completion string="wide" />
	    
	</set>
	
	<set name="com.rosensteiner.Tcl.function.namespace.ensemble.create" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-map"/>
	    <completion string="-parameters"/>
	    <completion string="-prefixes"/>
	    <completion string="-subcommands"/>
	    <completion string="-unknown"/>
	    <completion string="-command"/>
	</set>
	<set name="com.rosensteiner.Tcl.function.namespace.ensemble.configure" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-map"/>
	    <completion string="-parameters"/>
	    <completion string="-prefixes"/>
	    <completion string="-subcommands"/>
	    <completion string="-unknown"/>
	    <completion string="-namespace"/>
	</set>
	<set name="com.rosensteiner.Tcl.function.namespace.export" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-clear"/>
	</set>
	<set name="com.rosensteiner.Tcl.function.namespace.import" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-force"/>
	</set>
	<set name="com.rosensteiner.Tcl.function.namespace.which" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-command"/>
	    <completion string="-variable"/>
	</set>
	<!--interp options-->
	<set name="com.rosensteiner.Tcl.function.interp.cancel" casesensitive="true">
		<completion string="-unwind" />
	</set>
	<set name="com.rosensteiner.Tcl.function.interp.create" casesensitive="true">
		<completion string="-safe" />
	</set>
	<set name="com.rosensteiner.Tcl.function.interp.debug" casesensitive="true">
		<completion string="-frame" />
	</set>
	<set name="com.rosensteiner.Tcl.function.interp.invokehidden" casesensitive="true">
		<completion string="-namespace" />
		<completion string="-global" />
	</set>
	<set name="com.rosensteiner.Tcl.function.interp.limit" casesensitive="true">
		<completion string="-command" />
		<completion string="-granularity" />
		<completion string="-milliseconds" />
		<completion string="-seconds" />
		<completion string="-value" />
	</set>
	<!--clock options-->
	<set name="com.rosensteiner.Tcl.function.clock.clicks" casesensitive="true">
		<completion string="-milliseconds" /><!--deprecated-->
		<completion string="-microseconds" /><!--deprecated-->
	</set>
	<set name="com.rosensteiner.Tcl.function.clock.format" casesensitive="true">
		<completion string="-format">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:argument}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-timezone">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:argument}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-gmt" /><!--deprecated-->
		<completion string="-locale">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:current}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<set name="com.rosensteiner.Tcl.function.clock.scan" casesensitive="true">
		<completion string="-format">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:argument}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-timezone">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:argument}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-gmt" /><!--deprecated-->
		<completion string="-locale">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:current}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-base">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:argument}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<!--glob options-->
	<set name="com.rosensteiner.Tcl.function.glob" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-directory">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:directory}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-join"/>
	    <completion string="-nocomplain"/>
	    <completion string="-pathpathPrefix">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:pathPrefix}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-tails"/>
	    <completion string="-types">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:typeList}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<!--lsort options-->
	<set name="com.rosensteiner.Tcl.function.lsort" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-ascii"/>
	    <completion string="-dictionary"/>
	    <completion string="-integer"/>
	    <completion string="-real"/>
	    <completion string="-command">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:command}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-increasing"/>
	    <completion string="-decreasing"/>
	    <completion string="-indices"/>
	    <completion string="-index">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:indexList}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-stride">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:strideLength}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-nocase"/>
	    <completion string="-unique"/>
	</set>
	
	<!--trace options-->
	<set name="com.rosensteiner.Tcl.function.trace.add" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="command">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name ops commandPrefix}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="execution">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name ops commandPrefix}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="variable">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name ops commandPrefix}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<set name="com.rosensteiner.Tcl.function.trace.remove" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="command">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name opList commandPrefix}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="execution">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name opList commandPrefix}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="variable">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name opList commandPrefix}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<set name="com.rosensteiner.Tcl.function.trace.info" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="command">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="execution">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="variable">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	
	<!--close options-->
	<set name="com.rosensteiner.Tcl.function.close" casesensitive="true">
		<completion string="read" />
		<completion string="write" />
	</set>
	
	<!--return options-->
	<set name="com.rosensteiner.Tcl.function.return" casesensitive="true">
		<completion string="-code" />
		<completion string="-code ok" />
		<completion string="-code error" />
		<completion string="-code return" />
		<completion string="-code break" />
		<completion string="-code continue" />
		<completion string="-errorcode" />
		<completion string="-errorinfo" />
		<completion string="-errorstack" />
		<completion string="-level" />
		<completion string="-options" />
	</set>
	
	<!--tclsh options-->
	<set name="com.rosensteiner.Tcl.function.tclsh" casesensitive="true">
		<completion string="-encoding" />
	</set>
	
	<!--lsearch options-->
	<set name="com.rosensteiner.Tcl.function.lsearch" casesensitive="true">
	    <completion string="-exact"/>
	    <completion string="-glob"/>
	    <completion string="-regexp"/>
	    <completion string="-sorted"/>
	    <completion string="-all"/>
	    <completion string="-inline"/>
	    <completion string="-not"/>
	    <completion string="-start">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:index}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-ascii"/>
	    <completion string="-dictionary"/>
	    <completion string="-integer"/>
	    <completion string="-nocase"/>
	    <completion string="-real"/>
	    <completion string="-decreasing"/>
	    <completion string="-increasing"/>
	    <completion string="-bisect"/>
	    <completion string="-index">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:indexList}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-subindices"/>
	</set>
	
	<!--fcopy options-->
	<set name="com.rosensteiner.Tcl.function.fcopy" casesensitive="true">
		<completion string="-size" />
		<completion string="-command" />
	</set>
	
	<!--source options-->
	<set name="com.rosensteiner.Tcl.function.source" casesensitive="true">
		<completion string="-encoding" />
	</set>
	
	<!--socket options-->
	<set name="com.rosensteiner.Tcl.function.socket" casesensitive="true">
		<completion string="-server" />
		<completion string="-myaddr" />
		<completion string="-myport" />
		<completion string="-async" />
	</set>
	<set name="com.rosensteiner.Tcl.function.socket.-server" casesensitive="true">
		<completion string="-myaddr" />
		<completion string="-error" />
		<completion string="-sockname" />
		<completion string="-peername" />
	</set>
	
	<!--puts options-->
	<set name="com.rosensteiner.Tcl.function.puts" casesensitive="true">
		<completion string="-nonewline" />
	</set>
	<!--read options-->
	<set name="com.rosensteiner.Tcl.function.read" casesensitive="true">
		<completion string="-nonewline" />
	</set>
	
	<!--package options-->
	<set name="com.rosensteiner.Tcl.function.package.present" casesensitive="true">
		<completion string="-exact" />
	</set>
	<set name="com.rosensteiner.Tcl.function.package.require" casesensitive="true">
		<completion string="-exact" />
	</set>
	<set name="com.rosensteiner.Tcl.function.package.prefer" casesensitive="true">
		<completion string="latest" />
		<completion string="stable" />
	</set>
	
	<!--load options-->
	<set name="com.rosensteiner.Tcl.function.load" casesensitive="true">
		<completion string="-global" />
		<completion string="-lazy" />
	</set>
	
	<!--file options-->
	<set name="com.rosensteiner.Tcl.function.file.attributes" casesensitive="true">
		<completion string="-group" />
		<completion string="-owner" />
		<completion string="-permissions" />
		<completion string="-readonly" />
		<completion string="-archive" />
		<completion string="-hidden" />
		<completion string="-longname" />
		<completion string="-shortname" />
		<completion string="-system" />
		<completion string="-creator" />
		<completion string="-rsrclength" />
	</set>
	<set name="com.rosensteiner.Tcl.function.file.copy" casesensitive="true">
		<completion string="-force" />
	</set>
	<set name="com.rosensteiner.Tcl.function.file.delete" casesensitive="true">
		<completion string="-force" />
	</set>
	<set name="com.rosensteiner.Tcl.function.file.rename" casesensitive="true">
		<completion string="-force" />
	</set>
	
	<!--namespace options-->
	<set name="com.rosensteiner.Tcl.function.namespace.export" casesensitive="true">
		<completion string="-clear" />
	</set>
	<set name="com.rosensteiner.Tcl.function.namespace.import" casesensitive="true">
		<completion string="-force" />
	</set>
	<set name="com.rosensteiner.Tcl.function.namespace.which" casesensitive="true">
		<completion string="-command" />
		<completion string="-variable" />
	</set>
	
	<!--exec options-->
	<set name="com.rosensteiner.Tcl.function.exec" casesensitive="true">
		<completion string="-ignorestderr" />
		<completion string="-keepnewline" />
	</set>
	
	<!--unset options-->
	<set name="com.rosensteiner.Tcl.function.unset" casesensitive="true">
		<completion string="-nocomplain" />
	</set>
	
	<!--unload options-->
	<set name="com.rosensteiner.Tcl.function.unload" casesensitive="true">
		<completion string="-nocomplain" />
		<completion string="-keeplibrary" />
	</set>
	
	<!--switch options-->
	<set name="com.rosensteiner.Tcl.function.switch" casesensitive="true">
		<completion string="-exact" />
		<completion string="-glob" />
		<completion string="-regexp" />
		<completion string="-nocase" />
		<completion string="-matchvar" />
		<completion string="-indexvar" />
	</set>
		
	<!--subst options-->
	<set name="com.rosensteiner.Tcl.function.subst" casesensitive="true">
		<completion string="-nobackslashes" />
		<completion string="-nocommands" />
		<completion string="-novariables" />
	</set>
	
	<!--regexp options-->
	<set name="com.rosensteiner.Tcl.function.regexp" casesensitive="true">
		<completion string="-about" />
		<completion string="-expanded" />
		<completion string="-indices" />
		<completion string="-line" />
		<completion string="-linestop" />
		<completion string="-lineanchor" />
		<completion string="-nocase" />
		<completion string="-all" />
		<completion string="-inline" />
		<completion string="-start" />
	</set>
	
	<!--regsub options-->
	<set name="com.rosensteiner.Tcl.function.regsub" casesensitive="true">
		<completion string="-expanded" />
		<completion string="-line" />
		<completion string="-linestop" />
		<completion string="-lineanchor" />
		<completion string="-nocase" />
		<completion string="-all" />
		<completion string="-start" />
	</set>
	
	<!--prefix options-->
	<set name="com.rosensteiner.Tcl.function.prefix.match" casesensitive="true">
	    <completion string="-exact"/>
	    <completion string="-message"/>
	    <completion string="-error"/>
	</set>
	
	<!--dict options-->
	<set name="com.rosensteiner.Tcl.function.dict.filter" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="key"/>
	    <completion string="script"/>
	    <completion string="value"/>
	</set>
	
	<!--array options-->
	<set name="com.rosensteiner.Tcl.function.array.names" casesensitive="true">
	    <completion string="-exact" />
	    <completion string="-glob" />
	    <completion string="-regexp" />
	</set>
	
	<!--try options-->
	<set name="com.rosensteiner.Tcl.function.try" casesensitive="true">
	    <completion string="on">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:code variableList script}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="trap">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:pattern variableList script}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="finally">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:script}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	
	<!--http options-->
	<set name="com.rosensteiner.Tcl.function.http.config" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-accept">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:mimetypes}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-proxyhost">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:hostname}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-proxyport">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:number}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-proxyfilter">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:command}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-urlencoding">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:encoding}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-useragent">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:string}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<set name="com.rosensteiner.Tcl.function.http.geturl" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-binary">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:boolean}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-blocksize">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:size}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-channel">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-command">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:callback}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-handler">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:callback}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-headers">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:keyvaluelist}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-keepalive">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:boolean}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-method">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:type}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-myaddr">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:address}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-progress">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:callback}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-protocol">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:version}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-query">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:query}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-queryblocksize">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:size}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-querychannel">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:channelID}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-queryprogress">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:callback}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-strict">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:boolean}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-timeout">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:milliseconds}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-type">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:mime-type}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-validate">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:boolean}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	
	<!--string options-->
	<set name="com.rosensteiner.Tcl.function.string.is" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-strict" />
	    <completion string="-failindex" />
	</set>
	
	<!--string property-name-->
	<set name="com.rosensteiner.Tcl.function.string.compare" casesensitive="true">
		<completion string="-nocase" />
		<completion string="-length" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.equal" casesensitive="true">
		<completion string="-nocase" />
		<completion string="-length" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is alnum" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is alpha" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is ascii" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is boolean" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is control" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is digit" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is double" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is false" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is graph" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is integer" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is list" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is lower" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is print" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is punct" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is space" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is true" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is upper" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is wideinteger" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is wordchar" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is xdigit" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.map" casesensitive="true">
		<completion string="-nocase" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.match" casesensitive="true">
		<completion string="-nocase" />
	</set>
	
	<!--memory options-->
	<set name="com.rosensteiner.Tcl.function.memory.init" casesensitive="true">
		<completion string="on" />
		<completion string="off" />
	</set>
	<set name="com.rosensteiner.Tcl.function.memory.trace" casesensitive="true">
		<completion string="on" />
		<completion string="off" />
	</set>
	<set name="com.rosensteiner.Tcl.function.memory.validate" casesensitive="true">
		<completion string="on" />
		<completion string="off" />
	</set>
	<!--info options-->
	<set name="com.rosensteiner.Tcl.function.info.class" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="call">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class} ${2:method}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="constructor">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="definition">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class} ${2:method}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="destructor">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="filters">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="forward">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class} ${2:method}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="instances">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class} ${2:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="methods">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class} ${2:?options...?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="methodtype">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class} ${2:method}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="mixins">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="subclasses">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class} ${2:?pattern?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="superclasses">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="variables">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:class}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<set name="com.rosensteiner.Tcl.function.info.object" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="call">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object} ${2:method}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="class">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object} ${2:?className?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="definition">
	    	<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:object} ${2:?method?}$0)</transform-into>
				</append-dynamic>
			</behavior>
	    </completion>
	    <completion string="filters">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="forward">
	    	<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:object} ${2:?method?}$0)</transform-into>
				</append-dynamic>
			</behavior>
	    </completion>
	    <completion string="methods">
	    	<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:object} ${2:?option...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
	    </completion>
	    <completion string="methodtype">
	    	<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:object} ${2:method}$0)</transform-into>
				</append-dynamic>
			</behavior>
	    </completion>
	    <completion string="mixins">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="namespace">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="variables">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="vars">
	    	<behavior>
				<append-dynamic>
					<matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
					<transform-into>(?1:$1: ${1:object} ${2:?pattern?}$0)</transform-into>
				</append-dynamic>
			</behavior>
	    </completion>
	    <completion string="isa class">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="isa metaclass">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="isa mixin">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object} ${2:class}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="isa object">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="isa typeof">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:object} ${2:class}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	
	<set name="com.rosensteiner.Tcl.function.info.class.methods" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-all"/>
	    <completion string="-private"/>
	</set>
	<set name="com.rosensteiner.Tcl.function.info.object.methods" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-all"/>
	    <completion string="-private"/>
	</set>
	<!--fconfigure options-->
	<set name="com.rosensteiner.Tcl.function.fconfigure" casesensitive="true">
		<behavior>
		    <append-dynamic>
		        <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
		        <transform-into>(?1:: $0)</transform-into>
		    </append-dynamic>
		</behavior>
		<completion string="-blocking">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:boolean}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-buffering">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:newValue}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-buffersize">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:newSize}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-encoding">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-eofchar">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:char\|\{inChar outChar\}}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-translation">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:mode\|\{inMode outMode\}}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-mode">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?baud?}, ${2:pariry}, ${3:data}, ${4:stop}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-handshake">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:type}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-queue" />
		<completion string="-timeout">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:msec}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-ttycontrol">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:\{signal boolean signal boolean ...\}}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-ttystatus" />
		<completion string="-xchar">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:\{xonChar xoffChar\}}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-pollinterval">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:msec}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-sysbuffer">
			<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:\{inSize outSize\}}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
		<completion string="-lasterror" />
	</set>
	
	<!--zlib options-->
	<set name="com.rosensteiner.Tcl.function.zlib.gunzip" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-headerVar"/>
	</set>
	
	<set name="com.rosensteiner.Tcl.function.zlib.gzip" casesensitive="true">
	    <completion string="-level">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:level}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-header">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dict}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	
	<set name="com.rosensteiner.Tcl.function.zlib.push" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="compress"/>
	    <completion string="decompress"/>
	    <completion string="deflate"/>
	    <completion string="gunzip"/>
	    <completion string="gzip"/>
	    <completion string="inflate"/>
	</set>
	
	<set name="com.rosensteiner.Tcl.function.zlib.push.compress" casesensitive="true">
	    <completion string="-level">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionary}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-header">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:compressionLevel}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<set name="com.rosensteiner.Tcl.function.zlib.push.decompress" casesensitive="true">
	    <completion string="-level">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionary}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-header">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:compressionLevel}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<set name="com.rosensteiner.Tcl.function.zlib.push.deflate" casesensitive="true">
	    <completion string="-level">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionary}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-header">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:compressionLevel}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<set name="com.rosensteiner.Tcl.function.zlib.push.gunzip" casesensitive="true">
	    <completion string="-level">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionary}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-header">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:compressionLevel}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<set name="com.rosensteiner.Tcl.function.zlib.push.gzip" casesensitive="true">
	    <completion string="-level">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionary}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-header">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:compressionLevel}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	<set name="com.rosensteiner.Tcl.function.zlib.push.inflate" casesensitive="true">
	    <completion string="-level">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:dictionary}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-header">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:compressionLevel}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	</set>
	
	<set name="com.rosensteiner.Tcl.function.zlib.stream" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="compress">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?level?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="decompress"/>
	    <completion string="deflate">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?level?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="gunzip"/>
	    <completion string="gzip">
	    	<behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:?level?}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="inflate"/>
	</set>
	<!--put zlib function-->
	<set name="com.rosensteiner.Tcl.function.put" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-finalize" />
	    <completion string="-flush"/>
	    <completion string="-fullflush"/>
	</set>
	<!--add zlib function-->
	<set name="com.rosensteiner.Tcl.function.add" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-finalize" />
	    <completion string="-flush"/>
	    <completion string="-fullflush"/>
	</set>
	<!--chan options-->
	<set name="com.rosensteiner.Tcl.function.chan.configure" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-blocking">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:boolean}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-buffering">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:newValue}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-buffersize">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:newSize}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-encoding">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:name}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-eofchar">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:char}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-translation">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	                <transform-into>(?1:$1: ${1:mode}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-error"/>
	    <completion string="-sockname"/>
	    <completion string="-peername"/>
	    <completion string="-flush">
	        <behavior>
	            <append-dynamic>
	                <matched-suffix>(\s+\S)|\s*(\Z|[[:alnum:]])</matched-suffix>
	                <transform-into>(?1:$1: ${1:type}$0)</transform-into>
	            </append-dynamic>
	        </behavior>
	    </completion>
	    <completion string="-checksum"/>
	    <completion string="-header"/>
	</set>
	
	<set name="com.rosensteiner.Tcl.function.chan.seek" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="start"/>
	    <completion string="current"/>
	    <completion string="end"/>
	</set>
	
	<set name="com.rosensteiner.Tcl.function.seek" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="start"/>
	    <completion string="current"/>
	    <completion string="end"/>
	</set>

	<set name="com.rosensteiner.Tcl.function.chan.configure.-translation" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="auto"/>
	    <completion string="binary"/>
	    <completion string="cr"/>
	    <completion string="crlf"/>
	    <completion string="lf"/>
	</set>
	
	<set name="com.rosensteiner.Tcl.function.fileevent" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="readable"/>
	    <completion string="writable"/>
	</set>
	
	<set name="com.rosensteiner.Tcl.function.chan.event" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="readable"/>
	    <completion string="writable"/>
	</set>
	<set name="com.rosensteiner.Tcl.function.chan.copy" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-size"/>
	    <completion string="-command"/>
	</set>
	<set name="com.rosensteiner.Tcl.function.chan.puts" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
		<completion string="-nonewline"/>
	</set>
	<set name="com.rosensteiner.Tcl.function.chan.read" casesensitive="true">
	    <behavior>
	        <append-dynamic>
	            <matched-suffix>(\s*\S)|(\s*[^S])</matched-suffix>
	            <transform-into>(?1:: $0)</transform-into>
	        </append-dynamic>
	    </behavior>
	    <completion string="-nonewline"/>
	</set>
	
	<!--binary options-->
	<set name="com.rosensteiner.Tcl.function.binary.encode.base64" casesensitive="true">
		<completion string="-maxlen" />
		<completion string="-wrapchar" />
		<completion string="-strict" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.decode.base64" casesensitive="true">
		<completion string="-maxlen" />
		<completion string="-wrapchar" />
		<completion string="-strict" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.encode.hex" casesensitive="true">
		<completion string="-strict" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.decode.hex" casesensitive="true">
		<completion string="-strict" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.encode.uuencode" casesensitive="true">
		<completion string="-maxlen" />
		<completion string="-wrapchar" />
		<completion string="-strict" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.decode.uuencode" casesensitive="true">
		<completion string="-maxlen" />
		<completion string="-wrapchar" />
		<completion string="-strict" />
	</set>

</codesense> 
