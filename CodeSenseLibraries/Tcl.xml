<?xml version="1.0" encoding="UTF-8"?>
<!--
@description Defines the Tcl code sense libraries
@author 	 Bernhard Rosensteiner <brosensteiner@gmail.com>
@copyright 	 The MIT License

Copyright (c) 2012 Bernhard Rosensteiner

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
-->
<codesense version="1.0">
	    
	<set name="com.rosensteiner.Tcl.functions" casesensitive="true">
		
		<behavior>
			<append-dynamic>
				<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
				<transform-into>(?1:: $0)</transform-into>
			</append-dynamic>
		</behavior>
		
		<completion string="prefix" />
		<completion string="after">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:ms} ${2:?script script script ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="error">
		<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:message} ${2:?info?} ${3:?code?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lappend">
		<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:varName} ${2:?value value value ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="platform" />
		<completion string="tcl_findLibrary" />
		<completion string="append">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:varName} ${2:?value value value ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="eval">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lassign" />
		<completion string="platform::shell" />
		<completion string="tcl_startOfNextWord" />
		<completion string="apply" />
		<completion string="exec" />
		<completion string="lindex">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:?index ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="proc" />
		<completion string="tcl_startOfPreviousWord" />
		<completion string="array">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:arrayName} ${3:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="exit" />
		<completion string="linsert">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:index} ${3:element} ${4:?element element ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="puts">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:-nonewline} ${2:?channelId?} ${3:string}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="tcl_wordBreakAfter" />
		<completion string="auto_execok" />
		<completion string="expr">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arg} ${2:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="list">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="pwd" />
		<completion string="tcl_wordBreakBefore" />
		<completion string="auto_import" />
		<completion string="fblocked" />
		<completion string="llength">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:list}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="re_syntax" />
		<completion string="tcltest" />
		<completion string="auto_load" />
		<completion string="fconfigure" />
		<completion string="load" />
		<completion string="read" />
		<completion string="tclvars" />
		<completion string="auto_mkindex" />
		<completion string="fcopy" />
		<completion string="lrange">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:first} ${3:last}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="refchan" />
		<completion string="tell" />
		<completion string="auto_mkindex_old" />
		<completion string="file">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:name} ${3:?option value option value...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lrepeat">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?count?} ${2:element}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="regexp">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?switches?} ${2:exp} ${3:string} ${4:?matchVar?} ${5:?subMatchVar subMatchVar ...?} $0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="time" />
		<completion string="auto_qualify" />
		<completion string="fileevent">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:channelId} ${2:${3:readable} ${4:writable}} ${5:?script?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lreplace">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:first} ${3:last} ${4:?element element ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="registry" />
		<completion string="tm" />
		<completion string="auto_reset" />
		<completion string="filename" />
		<completion string="lreverse">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:list}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="regsub">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?switches?} ${2:exp} ${3:string} ${4:subSpec} ${5:?varName?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="trace">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="bgerror" />
		<completion string="flush" />
		<completion string="lsearch">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?options?} ${2:list} ${3:pattern}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="rename" />
		<completion string="unknown" />
		<completion string="binary" />
		<completion string="for" />
		<completion string="lset" />
		<completion string="return" />
		<completion string="unload" />
		<completion string="break" />
		<completion string="lsort">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?options?} ${2:list}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="Safe Base" />
		<completion string="unset" />
		<completion string="catch">
			<behavior>
				<append-dynamic>
				<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
				<transform-into>(?1:$1: ${1:script} ${2:?resultVarName?} ${3:?optionsVarName?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="format">
			<behavior>
				<append-dynamic>
				<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
				<transform-into>(?1:$1: ${1:formatString} ${2:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="mathfunc" />
		<completion string="scan">
			<behavior>
				<append-dynamic>
				<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
				<transform-into>(?1:$1: ${1:string} ${2:format} ${3:?varName varName ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="update" />
		<completion string="cd" />
		<completion string="gets" />
		<completion string="mathop" />
		<completion string="seek" />
		<completion string="uplevel" />
		<completion string="chan">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:?arg arg ...?}$0)</transform-into>
					</append-dynamic>
			</behavior>
		</completion>
		<completion string="glob" />
		<completion string="memory" />
		<completion string="set">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:varName} ${2:?value?}$0)</transform-into>
					</append-dynamic>
			</behavior>
		</completion>
		<completion string="upvar">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?level?} ${2:otherVar} ${3:myVar} ${4:?otherVar myVar ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="clock" />
		<completion string="global" />
		<completion string="msgcat" />
		<completion string="socket">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?options?} ${2:host} ${3:port}$0)</transform-into>
					</append-dynamic>
			</behavior>
		</completion>
		<completion string="variable">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?name value...?}$0)</transform-into>
					</append-dynamic>
			</behavior>
		</completion>
		<completion string="close" />
		<completion string="history" />
		<completion string="namespace" />
		<completion string="source" />
		<completion string="vwait" />
		<completion string="concat">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="http" />
		<completion string="open" />
		<completion string="split">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:string} ${2:?splitChars?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="continue" />
		<!--<completion string="foreach" />
		<completion string="while" />
		<completion string="if" />
		<completion string="else" />
		<completion string="elseif" />-->
		<completion string="then" />
		<completion string="package" />
		<completion string="string">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:options} ${2:arg} ${3:?arg ...?}$0)</transform-into>
					</append-dynamic>
			</behavior>
		</completion>
		<completion string="dde" />
		<completion string="incr" />
		<completion string="parray" />
		<completion string="subst">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?options?} ${2:string}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="dict">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:option} ${2:arg} ${3:?arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="info" />
		<completion string="pid" />
		<!--<completion string="switch">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?options?} ${2:string} ${3:pattern} ${4:body} ${5:?pattern body ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>-->
		<completion string="encoding" />
		<completion string="interp" />
		<completion string="pkg::create" />
		<completion string="eof" />
		<completion string="join">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:list} ${2:?joinString?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="pkg_mkIndex" />
		<completion string="tcl_endOfWord" />
		
	</set>
	
	<set name="com.rosensteiner.Tcl.math" casesensitive="true">
		
		<completion string="abs" />
		<completion string="acos" />
		<completion string="asin" />
		<completion string="atan" />
		<completion string="atan2" />
		<completion string="bool" />
		<completion string="ceil" />
		<completion string="cos" />
		<completion string="cosh" />
		<completion string="double" />
		<completion string="entier" />
		<completion string="exp" />
		<completion string="floor" />
		<completion string="fmod" />
		<completion string="hypot" />
		<completion string="int" />
		<completion string="isqrt" />
		<completion string="log" />
		<completion string="log10" />
		<completion string="max" />
		<completion string="min" />
		<completion string="pow" />
		<completion string="rand" />
		<completion string="round" />
		<completion string="sin" />
		<completion string="sinh" />
		<completion string="sqrt" />
		<completion string="srand" />
		<completion string="tan" />
		<completion string="tanh" />
		<completion string="wide" />
		
	</set>
	
	<set name="com.rosensteiner.Tcl.global-procedures" casesensitive="true">
	
		<behavior>
			<append-dynamic>
				<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
				<transform-into>(?1:: $0)</transform-into>
			</append-dynamic>
		</behavior>
		
		<completion string="auto_execs" />
		<completion string="auto_index" />
		<completion string="auto_noexec" />
		<completion string="auto_noload" />
		<completion string="auto_path" />
		<completion string="unknown_pending" />
		
	</set>
	
	<set name="com.rosensteiner.Tcl.global-variables" casesensitive="true">
	
		<behavior>
			<append-dynamic>
				<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
				<transform-into>(?1:: $0)</transform-into>
			</append-dynamic>
		</behavior>
		
		<completion string="env" />
		<completion string="errorCode" />
		<completion string="errorInfo" />
		<completion string="tcl_library" />
		<completion string="tcl_patchLevel" />
		<completion string="tcl_pkgPath" />
		<completion string="tcl_platform" />
		<completion string="tcl_precision" />
		<completion string="tcl_rcFileName" />
		<completion string="tcl_rcRsrcName" />
		<completion string="tcl_traceCompile" />
		<completion string="tcl_traceExec" />
		<completion string="tcl_wordchars" />
		<completion string="tcl_nonwordchars" />
		<completion string="tcl_version" />
		<completion string="argc" />
		<completion string="argv" />
		<completion string="argv0" />
		<completion string="tcl_interactive" />
		<completion string="geometry" />
		<!--this has to go somewhere:-->
		<completion string="TCL_OK" />
		<completion string="TCL_ERROR" />
		<completion string="TCL_RETURN" />
		<completion string="TCL_BREAK" />
		<completion string="TCL_CONTINUE" />
		<completion string="resultVarName" />
		<completion string="args" />
		
	</set>
	
	<!--don´t know where to put else:-->
	<set name="com.rosensteiner.Tcl.other-things" casesensitive="true">
		<completion string="errorinfo" />
		<completion string="errorcode" />
		<completion string="errorline" />
		<completion string="errorstack" />
		<completion string="code" />
		<completion string="level" />
	</set>
	
	<!--dict options-->
	<set name="com.rosensteiner.Tcl.function.dict" casesensitive="true">
		
		<completion string="append">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:?string ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="create">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?key value ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="exists">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryValue} ${2:key} ${3:?key ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="filter">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryValue} ${2:filterType} ${3:arg} ${4:?arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<!--<completion string="for">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:{ keyVar valueVar }} ${2:dictionaryValue} ${3:body}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>-->
		<completion string="get">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryValue} ${2:?key ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="incr">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:?increment?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="info">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryValue}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="keys">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryValue} ${2:?globPattern?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="lappend">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:pattern} ${4:?value ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="merge">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?dictionaryValue ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="remove">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryValue} ${2:?key ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="replace">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryValue} ${2:?key value ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="set">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:?key ...?} ${4:value}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="size">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryValue}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="unset">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:?key ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="update">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryVariable} ${2:key} ${3:varName} ${4:?key varName ...?} ${5:body}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="values">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryVariable} ${2:?globPattern?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="with">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:dictionaryVariable} ${2:?key ...?} ${3:body}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
	</set>
	
	<set name="com.rosensteiner.Tcl.function.dict.filter" casesensitive="true">
		
		<completion string="key" />
		<completion string="script" />
		<completion string="value" />
				
	</set>
	<!--package options-->
	<set name="com.rosensteiner.Tcl.function.package" casesensitive="true">
		
		<completion string="forget">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?package package ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="ifneeded">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:package} ${2:version} ${3:?script?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="names" />
		<completion string="present">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:-exact} ${2:package} ${3:version}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="provide">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:package} ${2:?version?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="require">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:-exact} ${2:package} ${3:?requirement...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="unknown">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?command?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="vcompare">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:version1} ${2:version2}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="versions">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:package}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="prefer">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:?latest|stable?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="vsatisfies">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:version} ${2:requirement...}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		
	</set>
	<set name="com.rosensteiner.Tcl.function.package.prefer" casesensitive="true">
		<completion string="latest" />
		<completion string="stable" />
		<completion string="unstable" />
	</set>
	<!--file options-->
	<set name="com.rosensteiner.Tcl.function.file" casesensitive="true">
		
		<completion string="attributes" />
		<completion string="copy" />
		<completion string="atime" />
		<completion string="copy" />
		<completion string="delete" />
		<completion string="channels" />
		<completion string="dirname" />
		<completion string="executable" />
		<completion string="exists" />
		<completion string="extension" />
		<completion string="isdirectory" />
		<completion string="isfile" />
		<completion string="join" />
		<completion string="link" />
		<completion string="lstat" />
		<completion string="mkdir" />
		<completion string="mtime" />
		<completion string="owned" />
		<completion string="pathtype" />
		<completion string="nativename" />
		<completion string="readlink" />
		<completion string="normalize" />
		<completion string="rename" />
		<completion string="rootname" />
		<completion string="size" />
		<completion string="separator" />
		<completion string="split" />
		<completion string="stat" />
		<completion string="system" />
		<completion string="tempfile" />
		<completion string="volumes" />
		<completion string="tail" />
		<completion string="type" />
		<completion string="writable" />
		<completion string="readable" />
				
	</set>
	<!--trace options-->
	<set name="com.rosensteiner.Tcl.function.trace" casesensitive="true">
		
		<completion string="add" />
		<completion string="remove" />
		<completion string="info" />
		<completion string="variable" />
		<completion string="vdelete" />
		<completion string="vinfo" />
				
	</set>
	<!--trace prefix-->
	<set name="com.rosensteiner.Tcl.function.trace.prefix" casesensitive="true">
		
		<completion string="all" />
		<completion string="longest" />
		<completion string="match" />
				
	</set>
	<set name="com.rosensteiner.Tcl.function.trace.add" casesensitive="true">
		
		<completion string="command" />
		<completion string="execution" />
		<completion string="variable" />
				
	</set>
	<set name="com.rosensteiner.Tcl.function.trace.add.command" casesensitive="true">
		
		<completion string="rename" />
		<completion string="delete" />
				
	</set>
	<set name="com.rosensteiner.Tcl.function.trace.add.execution" casesensitive="true">
		
		<completion string="enter" />
		<completion string="leave" />
		<completion string="enterstep" />
		<completion string="leavestep" />
				
	</set>
	<set name="com.rosensteiner.Tcl.function.trace.add.variable" casesensitive="true">
		
		<completion string="array" />
		<completion string="read" />
		<completion string="write" />
		<completion string="unset" />
				
	</set>
	<set name="com.rosensteiner.Tcl.function.trace.remove" casesensitive="true">
		
		<completion string="command" />
		<completion string="execution" />
		<completion string="variable" />
				
	</set>
	<set name="com.rosensteiner.Tcl.function.trace.info" casesensitive="true">
		
		<completion string="command" />
		<completion string="execution" />
		<completion string="variable" />
				
	</set>
	
	<!--after options-->
	<set name="com.rosensteiner.Tcl.function.after" casesensitive="true">
		
		<completion string="cancel" />
		<completion string="idle" />
		<completion string="info" />
				
	</set>
	
	<!--binary options-->
	<set name="com.rosensteiner.Tcl.function.binary" casesensitive="true">
		<completion string="scan">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:string} ${2:formatString} ${3:?varName varName ...?}$0)</transform-into>
					</append-dynamic>
			</behavior>
		</completion>
		<completion string="format">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:formatString} ${2:?arg arg ...?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="encode">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:format} ${2:?-option value ...?} ${3:data}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="decode">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:format} ${2:?-option value ...?} ${3:data}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
	</set>
	<!--binary options options-->
	<set name="com.rosensteiner.Tcl.function.binary.encode" casesensitive="true">
		<completion string="base64" />
		<completion string="hex" />
		<completion string="uuencode" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.decode" casesensitive="true">
		<completion string="base64" />
		<completion string="hex" />
		<completion string="uuencode" />
	</set>
	
	<!--clock options-->
	<set name="com.rosensteiner.Tcl.function.clock" casesensitive="true">
		<completion string="clicks" />
		<completion string="format" />
		<completion string="scan" />
		<completion string="seconds" />
	</set>
	
	<!--dde options-->
	<set name="com.rosensteiner.Tcl.function.dde" casesensitive="true">
		<completion string="eval" />
		<completion string="execute" />
		<completion string="poke" />
		<completion string="request" />
		<completion string="servername" />
		<completion string="services" />
	</set>
	
	<!--encoding options-->
	<set name="com.rosensteiner.Tcl.function.encoding" casesensitive="true">
		<completion string="convertfrom" />
		<completion string="convertto" />
		<completion string="names" />
		<completion string="system" />
	</set>
	
	<!--fileevent options-->
	<set name="com.rosensteiner.Tcl.function.fileevents" casesensitive="true">
		<completion string="readable" />
		<completion string="writable" />
	</set>
	
	<!--history options-->
	<set name="com.rosensteiner.Tcl.function.history" casesensitive="true">
		<completion string="add" />
		<completion string="change" />
		<completion string="clear" />
		<completion string="event" />
		<completion string="info" />
		<completion string="keep" />
		<completion string="nextid" />
		<completion string="redo" />
	</set>
	
	<!--namespace options-->
	<set name="com.rosensteiner.Tcl.function.namespace" casesensitive="true">
		<completion string="children" />
		<completion string="code" />
		<completion string="current" />
		<completion string="delete" />
		<completion string="ensemble" />
		<completion string="eval" />
		<completion string="exists" />
		<completion string="export" />
		<completion string="forget" />
		<completion string="import" />
		<completion string="inscope" />
		<completion string="origin" />
		<completion string="parent" />
		<completion string="path" />
		<completion string="qualifiers" />
		<completion string="tail" />
		<completion string="upvar" />
		<completion string="unknown" />
		<completion string="which" />
	</set>
	
	<!--array options-->
	<set name="com.rosensteiner.Tcl.function.array" casesensitive="true">
		<completion string="anymore">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName} ${2:searchId}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="donesearch">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName} ${2:searchId}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="exists">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="get">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName} ${2:?pattern?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="names">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName} ${2:?mode?} ${3:varName} ${4:?pattern?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="nextelement">
		<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName} ${2:searchId}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="set">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName} ${2:list}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="size">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="startsearch">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="statistics">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
		<completion string="unset">
			<behavior>
				<append-dynamic>
					<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
					<transform-into>(?1:$1: ${1:arrayName} ${2:?pattern?}$0)</transform-into>
				</append-dynamic>
			</behavior>
		</completion>
	</set>
	
	<!--string options-->
	<set name="com.rosensteiner.Tcl.function.string" casesensitive="true">
	
		<behavior>
			<append-dynamic>
				<matched-suffix>(\s+\S)|\s*[^\S]</matched-suffix>
				<transform-into>(?1:: $0)</transform-into>
			</append-dynamic>
		</behavior>
		
		<completion string="bytelength" />
		<completion string="compare" />
		<completion string="equal" />
		<completion string="first" />
		<completion string="index" />
		<completion string="is" />
		<completion string="last" />
		<completion string="length" />
		<completion string="map" />
		<completion string="match" />
		<completion string="range" />
		<completion string="repeat" />
		<completion string="replace" />
		<completion string="reverse" />
		<completion string="tolower" />
		<completion string="totitle" />
		<completion string="toupper" />
		<completion string="trim" />
		<completion string="trimleft" />
		<completion string="trimright" />
		<completion string="wordend" />
		<completion string="wordstart" />
	</set>
	<!--string options options-->
	<set name="com.rosensteiner.Tcl.function.string.is" casesensitive="true">
		<completion string="alnum" />
		<completion string="alpha" />
		<completion string="ascii" />
		<completion string="boolean" />
		<completion string="control" />
		<completion string="digit" />
		<completion string="double" />
		<completion string="false" />
		<completion string="graph" />
		<completion string="integer" />
		<completion string="list" />
		<completion string="lower" />
		<completion string="print" />
		<completion string="punct" />
		<completion string="space" />
		<completion string="true" />
		<completion string="upper" />
		<completion string="wideinteger" />
		<completion string="wordchar" />
		<completion string="xdigit" />
	</set>
	
	<!--info options-->
	<set name="com.rosensteiner.Tcl.function.info" casesensitive="true">
		<completion string="args" />
		<completion string="body" />
		<completion string="cmdcount" />
		<completion string="commands" />
		<completion string="complete" />
		<completion string="default" />
		<completion string="exists" />
		<completion string="frame" />
		<completion string="functions" />
		<completion string="globals" />
		<completion string="hostname" />
		<completion string="level" />
		<completion string="library" />
		<completion string="loaded" />
		<completion string="locals" />
		<completion string="nameofexecutable" />
		<completion string="patchlevel" />
		<completion string="procs" />
		<completion string="script" />
		<completion string="sharedlibextension" />
		<completion string="tclversion" />
		<completion string="vars" />
	</set>
	
	<set name="com.rosensteiner.Tcl.function.info.frame" casesensitive="true">
		<completion string="type" />
		<completion string="line" />
		<completion string="file" />
		<completion string="cmd" />
		<completion string="proc" />
		<completion string="lambda" />
		<completion string="level" />
	</set>
	
	<set name="com.rosensteiner.Tcl.function.info.frame.type" casesensitive="true">
		<completion string="source" />
		<completion string="proc" />
		<completion string="eval" />
		<completion string="precompiled" />
	</set>
	
	
	<!--Tcl property-name-->
	<!--socket property-name-->
	<set name="com.rosensteiner.Tcl.function.socket" casesensitive="true">
		<completion string="-server" />
		<completion string="-myaddr" />
		<completion string="-myport" />
		<completion string="-async" />
	</set>
	<set name="com.rosensteiner.Tcl.function.socket.-server" casesensitive="true">
		<completion string="-myaddr" />
		<completion string="-error" />
		<completion string="-sockname" />
		<completion string="-peername" />
	</set>
	<!--puts switch-->
	<set name="com.rosensteiner.Tcl.function.puts" casesensitive="true">
		<completion string="-nonewline" />
	</set>
	<!--package property-name-->
	<set name="com.rosensteiner.Tcl.function.package.present" casesensitive="true">
		<completion string="-exact" />
	</set>
	<set name="com.rosensteiner.Tcl.function.package.require" casesensitive="true">
		<completion string="-exact" />
	</set>
	<!--file property-name-->
	<set name="com.rosensteiner.Tcl.function.file.attributes" casesensitive="true">
		<completion string="-group" />
		<completion string="-owner" />
		<completion string="-permissions" />
		<completion string="-readonly" />
		<completion string="-archive" />
		<completion string="-hidden" />
		<completion string="-longname" />
		<completion string="-shortname" />
		<completion string="-system" />
		<completion string="-creator" />
		<completion string="-rsrclength" />
	</set>
	<set name="com.rosensteiner.Tcl.function.file.copy" casesensitive="true">
		<completion string="-force" />
	</set>
	<set name="com.rosensteiner.Tcl.function.file.delete" casesensitive="true">
		<completion string="-force" />
	</set>
	<set name="com.rosensteiner.Tcl.function.file.rename" casesensitive="true">
		<completion string="-force" />
	</set>
	<!--namespace property-name-->
	<set name="com.rosensteiner.Tcl.function.namespace.export" casesensitive="true">
		<completion string="-clear" />
	</set>
	<set name="com.rosensteiner.Tcl.function.namespace.import" casesensitive="true">
		<completion string="-force" />
	</set>
	<set name="com.rosensteiner.Tcl.function.namespace.which" casesensitive="true">
		<completion string="-command" />
		<completion string="-variable" />
	</set>
	<!--unset property-name-->
	<set name="com.rosensteiner.Tcl.function.unset" casesensitive="true">
		<completion string="-nocomplain" />
	</set>
	<!--prefix property-name-->
	<set name="com.rosensteiner.Tcl.function.prefix.match" casesensitive="true">
		
		<completion string="-exact" />
		<completion string="-message" />
		<completion string="-error" />
				
	</set>
	<!--array property-name-->
	<set name="com.rosensteiner.Tcl.function.array.names" casesensitive="true">
		
		<completion string="-exact" />
		<completion string="-glob" />
		<completion string="-regexp" />
				
	</set>
	<!--switch property-name-->
	<set name="com.rosensteiner.Tcl.function.switch" casesensitive="true">
		
		<completion string="-exact" />
		<completion string="-glob" />
		<completion string="-regexp" />
		<completion string="-nocase" />
		<completion string="-matchvar" />
		<completion string="-indexvar" />
				
	</set>
	<!--string property-name-->
	<set name="com.rosensteiner.Tcl.function.string.compare" casesensitive="true">
		<completion string="-nocase" />
		<completion string="-length" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.equal" casesensitive="true">
		<completion string="-nocase" />
		<completion string="-length" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.alnum" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.alpha" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.ascii" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.boolean" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.control" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.digit" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.double" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.false" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.graph" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.integer" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.list" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.lower" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.print" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.punct" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.space" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.true" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.upper" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.wideinteger" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.wordchar" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.is.xdigit" casesensitive="true">
		<completion string="-strict" />
		<completion string="-failindex" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.map" casesensitive="true">
		<completion string="-nocase" />
	</set>
	<set name="com.rosensteiner.Tcl.function.string.match" casesensitive="true">
		<completion string="-nocase" />
	</set>
	<!--subst property-name-->
	<set name="com.rosensteiner.Tcl.function.subst" casesensitive="true">
		<completion string="-nobackslashes" />
		<completion string="-nocommands" />
		<completion string="-novariables" />
	</set>
	<!--regexp property-name-->
	<set name="com.rosensteiner.Tcl.function.regexp" casesensitive="true">
		<completion string="-about" />
		<completion string="-expanded" />
		<completion string="-indices" />
		<completion string="-line" />
		<completion string="-linestop" />
		<completion string="-lineanchor" />
		<completion string="-nocase" />
		<completion string="-all" />
		<completion string="-inline" />
		<completion string="-start" />
	</set>
	<!--regsub property-name-->
	<set name="com.rosensteiner.Tcl.function.regsub" casesensitive="true">
		<completion string="-expanded" />
		<completion string="-line" />
		<completion string="-linestop" />
		<completion string="-lineanchor" />
		<completion string="-nocase" />
		<completion string="-all" />
		<completion string="-start" />
	</set>
	<!--binary property-name-->
	<set name="com.rosensteiner.Tcl.function.binary.encode.base64" casesensitive="true">
		<completion string="-maxlen" />
		<completion string="-wrapchar" />
		<completion string="-strict" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.decode.base64" casesensitive="true">
		<completion string="-maxlen" />
		<completion string="-wrapchar" />
		<completion string="-strict" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.encode.hex" casesensitive="true">
		<completion string="-strict" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.decode.hex" casesensitive="true">
		<completion string="-strict" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.encode.uuencode" casesensitive="true">
		<completion string="-maxlen" />
		<completion string="-wrapchar" />
		<completion string="-strict" />
	</set>
	<set name="com.rosensteiner.Tcl.function.binary.decode.uuencode" casesensitive="true">
		<completion string="-maxlen" />
		<completion string="-wrapchar" />
		<completion string="-strict" />
	</set>
	  
</codesense> 
