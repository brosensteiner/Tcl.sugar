/*
    @theme Tcl Placeholder
    @placeholder language-root.tcl
    @author Bernhard Rosensteiner <brosensteiner@gmail.com>
    has some Amira hacks - delete Amira selector if needed
*/

:not(tcl.comment, tcl.string) {
	spell-check: disabled;
}

tcl.shebang {
	color: #d44950;
	font-weight: bold;
	background-color: rgba(57, 79, 227, 0.3);
}

tcl.global-variables,
tcl.global-procedures {
	font-weight: bold;
}

tcl.variable.substitute {
	color: rgba(163, 214, 132, 0.8);
}

tcl.keyword.command.amira.global.commands.viewer + tcl.keyword.option.amira.viewer,
tcl.keyword.command.amira.global.commands.viewer + tcl.keyword.option.amira.viewer {
	color: #4f76cf;
}

tcl.variable.evaluate {
	color: #82c0e5;
	font-weight: normal;
}

tcl.variable,
tcl.variable.substitute.rest,
tcl.builtinfunc[text='set'] + s + *,

tcl.builtinfunc[text='append'] + s + word,

tcl.builtinfunc[text='scan'] + s + :not(keyword) + s + :not(keyword) + s + :not(keyword),
tcl.builtinfunc[text='scan'] + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword),
tcl.builtinfunc[text='scan'] + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword),
tcl.builtinfunc[text='scan'] + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword),
tcl.builtinfunc[text='scan'] + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword),

tcl.builtinfunc[text='lassign'] + s + * + s + :not(keyword),
tcl.builtinfunc[text='lassign'] + s + * + s + :not(keyword) + s + :not(keyword),
tcl.builtinfunc[text='lassign'] + s + * + s + :not(keyword) + s + :not(keyword) + s + :not(keyword),
tcl.builtinfunc[text='lassign'] + s + * + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword),
tcl.builtinfunc[text='lassign'] + s + * + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword),

tcl.builtinfunc-regexp + s + word,
tcl.builtinfunc-regexp + s + :not(keyword) + s + word,
tcl.builtinfunc-regexp + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.builtinfunc-regexp + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.builtinfunc-regexp + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.builtinfunc-regexp + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) +  s + :not(keyword) + s + word,

tcl.builtinfunc-regsub + s + * + s + * + s + word,
tcl.builtinfunc-regsub + s + switches + s + * + s + * + s + word,
tcl.builtinfunc-regsub + s + switches + s + switches + s + * + s + * + s + word,
tcl.builtinfunc-regsub + s + switches + s + switches + s + switches + s + * + s + * + s + word,
tcl.builtinfunc-regsub + s + switches + s + switches + s + switches + s + switches + s + * + s + * + s + word,
tcl.builtinfunc-regsub + s + switches + s + switches + s + switches + s + switches + s + switches + s + * + s + * + s + word,
tcl.builtinfunc-regsub + s + switches + s + switches + s + switches + s + switches + s + switches + s + switches + s + * + s + * + s + word,
tcl.builtinfunc-regsub + s + switches + s + switches + s + switches + s + switches + s + switches + s + switches + s + switches + s + * + s + * + s + word,

tcl.command-variable + s + word,
tcl.command-variable + s + word + s + :not(keyword) + s + word,
tcl.command-variable + s + word + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.command-variable + s + word + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.command-variable + s + word + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,

tcl.command-global + s + word,
tcl.command-global + s + :not(keyword) + s + word,
tcl.command-global + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.command-global + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.command-global + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,

tcl.upvar + s + :not(keyword,numeric) + s + word,
tcl.upvar + s + :not(keyword,numeric) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.upvar + s + :not(keyword,numeric) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.upvar + s + :not(keyword,numeric) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.upvar + s + :not(keyword,numeric) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,

tcl.upvar + s + numeric + s + :not(keyword) + s + word,
tcl.upvar + s + numeric + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.upvar + s + numeric + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.upvar + s + numeric + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,
tcl.upvar + s + numeric + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + :not(keyword) + s + word,

tcl.builtinfunc-catch + s + word,
tcl.builtinfunc-catch + s + word + s + word,

tcl.keyword.control.start[text='foreach'] + s + word,
tcl.keyword.control.start[text='foreach'] + s + open-brace + s + word,
tcl.keyword.control.start[text='foreach'] + s + open-brace + s + word + s + word,
tcl.keyword.control.start[text='foreach'] + s + open-brace + s + word + s + word + s + word,
tcl.keyword.control.start[text='foreach'] + s + open-brace + s + word + s + word + s + word + s + word,
tcl.keyword.control.start[text='foreach'] + s + open-brace + s + word + s + word + s + word + s + word + s + word  {
	color: #7ac54d;
}

tcl.keyword.variable.rename.oldname,
tcl.builtinfunc[text='unset'] + s + :not(keyword,variable),
tcl.builtinfunc[text='unset'] + s + :not(keyword,variable) + s + :not(keyword,variable),
tcl.builtinfunc[text='unset'] + s + :not(keyword,variable) + s + :not(keyword,variable) + s + :not(keyword,variable),
tcl.builtinfunc[text='unset'] + s + :not(keyword,variable) + s + :not(keyword,variable) + s + :not(keyword,variable) + s + :not(keyword,variable),
tcl.builtinfunc[text='unset'] + s + :not(keyword,variable) + s + :not(keyword,variable) + s + :not(keyword,variable) + s + :not(keyword,variable) + s + :not(keyword,variable) {
	color: #e51c1c;
}

**********Amira**********,
*:not(tcl.options) + s + *:not(keyword) + s + tcl.keyword.options.trace,
amira.variable,
amira.keyword {
	color: #4f76cf;
	font-weight: bold;
}
tcl.keyword.option.amira {
	font-weight: normal;
}

tcl.keyword.command {
	color: rgb(73, 134, 185);
}
tcl.builtinfunc + s + options,
tcl.builtinfunc + s + options + s + options,
tcl.builtinfunc + s + options + s + options + s + options,
tcl.builtinfunc + s + builtinfunc,
tcl.builtinfunc + s + builtinfunc + s + builtinfunc,
tcl.builtinfunc + s + builtinfunc + s + builtinfunc + s + builtinfunc,
tcl.builtinfunc[text='fileevent'] + s + :not(keyword) + s + options.fileevent,
tcl.builtinfunc[text='dict'] + s + options + s + * + s + dict.options,
tcl.builtinfunc[text='trace'] + s + options + s + command,
tcl.builtinfunc[text='trace'] + s + options + s + * + s + * + s + keyword,
tcl.builtinfunc[text='trace'] + s + options + s + * + s + * + s + balanced-braces > keyword,
tcl.builtinfunc[text='trace'] + s + options + s + * + s + * + s + balanced-brackets > keyword:not(builtinfunc[text='list']) {
	color: rgba(186, 129, 233, 0.6);
	font-weight: normal;
}
switches, {
	color: rgba(186, 129, 233, 0.38);
}

tcl.keyword.operator.logical {
	font-weight: bold;
}

tcl.punctuation.open-bracket,
tcl.punctuation.close-bracket,
tcl.format-specifier, {
	color: #e82c13;
}
tcl.format-type{
	font-weight:bold;
}
tcl.keyword.character-class,
tcl.open-brace,
tcl.close-brace,
tcl.open-parenthesis,
tcl.close-parenthesis {
	color: #7f7f7f;
}
